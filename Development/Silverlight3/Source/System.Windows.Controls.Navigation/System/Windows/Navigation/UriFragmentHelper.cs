//-----------------------------------------------------------------------
// <copyright company="Microsoft">
//      (c) Copyright Microsoft Corporation.
//      This source is subject to the Microsoft Public License (Ms-PL).
//      Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
//      All other rights reserved.
// </copyright>
//-----------------------------------------------------------------------

using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;
using System.Windows.Browser;

namespace System.Windows.Navigation
{
    /// <summary>
    /// Provides navigation services to update the browser URL fragment (hash).  
    /// For use in creating browser fragment navigation events that will not 
    /// reload the page DOM.
    /// </summary>
    /// <remarks>
    /// The hosting Silverlight control must have HTML script access for 
    /// browser fragment navigation services to work.
    /// </remarks>
    /// <QualityBand>Preview</QualityBand>
    public static class UriFragmentHelper
    {
        #region Fields

        /// <summary>
        /// Maximum allowed length of URLs generated by this server.
        /// </summary>
        /// <remarks>
        /// There are no standard restrictions on URL length.  This is an artificial limitation imposed to ensure cross-browser compatibility.
        /// </remarks>
        internal static readonly int MaxUriLength = 2048;

        /// <summary>
        /// Resource key for embedded browser navigation JavaScript.
        /// </summary>
        private const string ScriptResourceKey = "System.Windows.Navigation.System.Windows.Navigation.BrowserNavigator.js";

        /// <summary>
        /// A boolean used to indicate whether or not client scripts are ready on the page.
        /// </summary>
        private static bool clientScriptsReady = RenderClientScript();

        #endregion Fields

        #region Events

        /// <summary>
        /// Occurs when the browser URL fragment has changed.
        /// </summary>
        /// <remarks>
        /// The current System.Windows.Application instance will be passed as the event sender.
        /// </remarks>
        internal static event EventHandler Navigated;

        #endregion Events

        #region Properties

        internal static string CurrentFragment
        {
            get
            {
                ScriptObject location = HtmlPage.Window.GetProperty("location") as ScriptObject;
                string uriString = location.Invoke("toString") as string;
                Uri u = new Uri(uriString, UriKind.Absolute);
                if (!String.IsNullOrEmpty(u.Fragment))
                {
                    return u.Fragment.Substring(1);
                }
                return String.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether or not the UriFragmentHelper can be used.
        /// </summary>
        /// <remarks>
        /// The hosting Silverlight control must have HTML script access for 
        /// the UriFragmentHelper to work.
        /// </remarks>
        internal static bool IsEnabled
        {
            get { return HtmlPage.IsEnabled && clientScriptsReady; }
        }

        #endregion Properties

        #region Methods

        /// <summary>
        /// Creates a navigation entry in the host browser using the provided 
        /// URI fragment.
        /// </summary>
        /// <param name="uriFragment">A URI fragment to record in the browser history.</param>
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings", MessageId = "0#", Justification = "This represents a Uri, but will be used by the browser in only its string representation.")]
        internal static void Navigate(string uriFragment)
        {
            Navigate(uriFragment, null);
        }

        /// <summary>
        /// Creates a navigation entry in the host browser using the provided 
        /// URI fragment and updates the host browser title.
        /// </summary>
        /// <param name="uriFragment">A URI fragment to record in the browser history.</param>
        /// <param name="title">A title string used to update the browser title text.</param>
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings", MessageId = "0#", Justification = "This represents a Uri, but will be used by the browser in only its string representation.")]
        internal static void Navigate(string uriFragment, string title)
        {
            // Check against null 'uriFragment' values.  (Empty string values are OK.)
            Guard.ArgumentNotNull(uriFragment, "uriFragment");

            // Validate that we're HTML-bridge enabled.
            if (IsEnabled == false)
            {
                throw new InvalidOperationException(Resource.UriFragmentHelper_HtmlBridgeDisabled);
            }

            // Validate length restrictions
            if (ValidateUrlLengthRestrictions(uriFragment) == false)
            {
                throw new InvalidOperationException(Resource.UriFragmentHelper_MaximumUriLength);
            }

            BrowserNavigationProxy.Current.Navigate(uriFragment, title);
        }

        /// <summary>
        /// Raises the Navigated event.
        /// </summary>
        private static void OnNavigated()
        {
            EventHandler eventHandler = UriFragmentHelper.Navigated;

            if (eventHandler != null)
            {
                eventHandler(null, EventArgs.Empty);
            }
        }

        /// <summary>
        /// Validates that the <paramref name="uriFragment"/> value will not exceed the safe URI length limit.
        /// </summary>
        /// <param name="uriFragment">A URI fragment to record in the browser history.</param>
        /// <returns>A value indicating whether or not the URI fragment value will exceed the safe URI length limit.</returns>
        private static bool ValidateUrlLengthRestrictions(string uriFragment)
        {
            ScriptObject location = HtmlPage.Window.GetProperty("location") as ScriptObject;
            string currentUri = location.Invoke("toString") as string;
            int hashIndex = currentUri.IndexOf('#');
            int currentUriLength = (hashIndex > -1 ? hashIndex : currentUri.Length);

            // Here, we're adding 1 to account for the '#' character that will exist after updating.
            return ((currentUriLength + uriFragment.Length + 1) <= MaxUriLength);
        }

        /// <summary>
        /// Retrieves and renders browser history JavaScript from our resource manifest.
        /// </summary>
        /// <returns>
        /// A value indicating whether or not the required browser history client script
        /// was found and rendered on the host page.
        /// </returns>
        private static bool RenderClientScript()
        {
            if (HtmlPage.IsEnabled)
            {
                // Retrieve client script resources from assembly.
                Assembly current = Assembly.GetExecutingAssembly();
                using (Stream resourceStream = current.GetManifestResourceStream(ScriptResourceKey))
                {
                    if (resourceStream != null)
                    {
                        // Read resource contents
                        StreamReader resourceReader = new StreamReader(resourceStream);
                        string scriptSource = resourceReader.ReadToEnd();

                        // Render to host page.
                        HtmlPage.Window.Eval(scriptSource);
                        return true;
                    }
                }
            }

            return false;
        }

        #endregion Methods

        #region Nested Types

        /// <summary>
        /// Proxy used internally to communicate with the browser.
        /// </summary>
        [ScriptableType]
        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "It must be publicly visible so it can be a ScriptableType")]
        public sealed class BrowserNavigationProxy : DependencyObject
        {
            #region Fields

            /// <summary>
            /// Script object key used in client JavaScript to access the proxy object.
            /// </summary>
            private const string ScriptObjectKey = "BrowserNavigationProxy";

            /// <summary>
            /// Script object method key used in client JavaScript to access the proxy object navigation method.
            /// </summary>
            private const string ScriptMethodKey = "BrowserNavigated";

            /// <summary>
            /// Singleton instance of proxy object.
            /// </summary>
            private static readonly BrowserNavigationProxy instance = new BrowserNavigationProxy();

            /// <summary>
            /// Reference to HTML DOM window.Sys object.
            /// </summary>
            private ScriptObject _sysScriptObject;

            /// <summary>
            /// Reference to HTML DOM window.Sys.Navigator object.
            /// </summary>
            private ScriptObject _navigatorScriptObject;

            #endregion Fields

            #region Constructors

            /// <summary>
            /// Private constructor.
            /// </summary>
            private BrowserNavigationProxy()
            {
                this.RegisterSelf();
            }

            #endregion Constructors

            #region Properties

            /// <summary>
            /// Gets a reference to singleton BrowserNavigationProxy instance.
            /// </summary>
            internal static BrowserNavigationProxy Current
            {
                get
                {
                    return instance;
                }
            }

            /// <summary>
            /// Gets the HTML page "Sys" script object or returns null if not found.
            /// </summary>
            internal ScriptObject SysScriptObject
            {
                get
                {
                    if (this._sysScriptObject == null)
                    {
                        this._sysScriptObject = HtmlPage.Window.GetProperty("Sys") as ScriptObject;
                    }

                    return this._sysScriptObject;
                }
            }

            /// <summary>
            /// Gets the HTML page "Sys.Navigator" script object or returns null if not found.
            /// </summary>
            internal ScriptObject NavigatorScriptObject
            {
                get
                {
                    if (this._navigatorScriptObject == null && this.SysScriptObject != null)
                    {
                        this._navigatorScriptObject = this._sysScriptObject.GetProperty("Navigator") as ScriptObject;
                    }

                    return this._navigatorScriptObject;
                }
            }

            #endregion Properties

            #region Methods

            /// <summary>
            /// Notifies the UriFragmentHelper of a browser navigation event.
            /// </summary>
            /// <remarks>
            /// This method is intended to be invoked by client scripts through the HTML bridge.
            /// </remarks>
            [ScriptableMember]
            [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "This is a scriptable member and must be instance based.")]
            [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings", MessageId = "0#", Justification = "No default HTML bridge conversion exists for Uri to string.")]
            public void BrowserNavigated()
            {
                UriFragmentHelper.OnNavigated();
            }

            /// <summary>
            /// Navigates the browser using the provided URI Fragment.
            /// </summary>
            /// <param name="uriFragment">A URI fragment to place in the browser location URI.</param>
            /// <param name="title">Browser title string.</param>
            internal void Navigate(string uriFragment, string title)
            {
                Guard.ArgumentNotNull(uriFragment, "uriFragment");

                this.NavigatorScriptObject.Invoke("navigate", uriFragment, title);
            }

            /// <summary>
            /// Registers the current application for browser navigation interop.
            /// </summary>
            private void RegisterSelf()
            {
                try
                {
                    HtmlPage.RegisterScriptableObject(ScriptObjectKey, this);
                    if (this.NavigatorScriptObject != null)
                    {
                        this.NavigatorScriptObject.Invoke(
                            "register",
                            HtmlPage.Plugin,
                            ScriptObjectKey,
                            ScriptMethodKey);
                    }
                }
                catch (InvalidOperationException ex)
                {
                    Debug.WriteLine(Resource.UriFragmentHelper_BrowserNavigationProxy_RegistrationFailed, ex.Message);
                }
            }

            #endregion Methods
        }

        #endregion Nested Types
    }
}
