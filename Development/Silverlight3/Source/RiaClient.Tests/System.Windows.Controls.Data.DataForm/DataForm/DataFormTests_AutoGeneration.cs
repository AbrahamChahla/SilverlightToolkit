//-----------------------------------------------------------------------
// <copyright company="Microsoft" file="DataFormTests_AutoGeneration.cs">
//      (c) Copyright Microsoft Corporation.
//      This source is subject to the Microsoft Public License (Ms-PL).
//      Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
//      All other rights reserved.
// </copyright>
//-----------------------------------------------------------------------

using System.Windows.Data;
using Microsoft.Silverlight.Testing;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections;

namespace System.Windows.Controls.UnitTests
{
    /// <summary>
    /// Tests <see cref="DataForm"/> autogeneration.
    /// </summary>
    [TestClass]
    public class DataFormTests_AutoGeneration : DataFormTests_Base
    {
        #region Helper Properties

        /// <summary>
        /// Gets the <see cref="DataForm"/> app.
        /// </summary>
        private DataFormApp_AutoGeneration DataFormApp
        {
            get
            {
                return this.DataFormAppBase as DataFormApp_AutoGeneration;
            }
        }

        /// <summary>
        /// Gets the <see cref="DataForm"/>.
        /// </summary>
        private DataForm DataForm
        {
            get
            {
                return this.DataFormApp.dataForm;
            }
        }

        #endregion Helper Properties

        #region Initialization

        /// <summary>
        /// Initializes the test framework.
        /// </summary>
        public override void Initialize()
        {
            base.Initialize();
            this.DataFormAppBase = new DataFormApp_AutoGeneration();
        }

        #endregion Initialization

        /// <summary>
        /// Ensure that fields are autogenerated properly.
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Description("Ensure that fields are autogenerated properly.")]
        public void AutoGenerateFields()
        {
            this.EnqueueCallback(() =>
            {
                this.DataForm.CurrentItem = new DataClassAllTwoWayBindableAttributes();
            });

            this.AddToPanelAndWaitForLoad();

            this.EnqueueCallback(() =>
            {
                Assert.AreEqual(4, this.DataForm.Fields.Count);
                Binding[] bindings = this.GetBindings();

                Assert.AreEqual("BoolProperty", bindings[0].Path.Path);
                Assert.IsTrue(bindings[0].ValidatesOnExceptions);
                Assert.IsTrue(bindings[0].NotifyOnValidationError);

                Assert.AreEqual("DateTimeProperty", bindings[1].Path.Path);
                Assert.IsTrue(bindings[1].ValidatesOnExceptions);
                Assert.IsTrue(bindings[1].NotifyOnValidationError);

                Assert.AreEqual("IntProperty", bindings[2].Path.Path);
                Assert.IsTrue(bindings[2].ValidatesOnExceptions);
                Assert.IsTrue(bindings[2].NotifyOnValidationError);

                Assert.AreEqual("StringProperty", bindings[3].Path.Path);
                Assert.IsTrue(bindings[3].ValidatesOnExceptions);
                Assert.IsTrue(bindings[3].NotifyOnValidationError);
            });

            this.EnqueueTestComplete();
        }

        /// <summary>
        /// Ensure that fields are autogenerated properly when the class has no bindable attribute.
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Description("Ensure that fields are autogenerated properly when the class has no bindable attribute.")]
        public void AutoGenerateFieldsNoClassBindableAttribute()
        {
            this.EnqueueCallback(() =>
            {
                this.DataForm.CurrentItem = new DataClass();
            });

            this.ExpectClassBindableAttribute(true, BindingMode.TwoWay);
        }

        /// <summary>
        /// Ensure that fields are autogenerated properly when the class has a two-way bindable attribute.
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Description("Ensure that fields are autogenerated properly when the class has a two-way bindable attribute.")]
        public void AutoGenerateFieldsTwoWayClassBindableAttribute()
        {
            this.EnqueueCallback(() =>
            {
                this.DataForm.CurrentItem = new DataClassBindableTwoWay();
            });

            this.ExpectClassBindableAttribute(true, BindingMode.TwoWay);
        }

        /// <summary>
        /// Ensure that fields are autogenerated properly when the class has a one-way bindable attribute.
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Description("Ensure that fields are autogenerated properly when the class has a one-way bindable attribute.")]
        public void AutoGenerateFieldsOneWayClassBindableAttribute()
        {
            this.EnqueueCallback(() =>
            {
                this.DataForm.CurrentItem = new DataClassBindableOneWay();
            });

            this.ExpectClassBindableAttribute(true, BindingMode.OneWay);
        }

        /// <summary>
        /// Ensure that fields are autogenerated properly when the class has a bindable=false bindable attribute.
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Description("Ensure that fields are autogenerated properly when the class has a bindable=false bindable attribute.")]
        public void AutoGenerateFieldsFalseClassBindableAttribute()
        {
            this.EnqueueCallback(() =>
            {
                this.DataForm.CurrentItem = new DataClassNotBindable();
            });

            this.ExpectClassBindableAttribute(false, BindingMode.TwoWay);
        }

        /// <summary>
        /// Ensure that fields are autogenerated properly with AutoGeneratingField.
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Description("Ensure that fields are autogenerated properly with AutoGeneratingField.")]
        public void AutoGenerateFieldsWithAutoGeneratingField()
        {
            this.EnqueueCallback(() =>
            {
                this.DataForm.AutoGeneratingField += new EventHandler<DataFormAutoGeneratingFieldEventArgs>(OnDataFormAutoGeneratingField);
                this.DataForm.CurrentItem = new DataClassAllTwoWayBindableAttributes();
            });

            this.AddToPanelAndWaitForLoad();

            this.EnqueueCallback(() =>
            {
                Assert.AreEqual(3, this.DataForm.Fields.Count);
                Binding[] bindings = this.GetBindings();

                Assert.AreEqual("DateTimeProperty", bindings[0].Path.Path);
                Assert.IsTrue(bindings[0].ValidatesOnExceptions);
                Assert.IsTrue(bindings[0].NotifyOnValidationError);

                Assert.AreEqual("IntProperty", bindings[1].Path.Path);
                Assert.IsTrue(bindings[1].ValidatesOnExceptions);
                Assert.IsTrue(bindings[1].NotifyOnValidationError);
                Assert.IsInstanceOfType(this.DataForm.Fields[1], typeof(DataFormComboBoxField));

                Assert.AreEqual("StringProperty", bindings[2].Path.Path);
                Assert.IsTrue(bindings[2].ValidatesOnExceptions);
                Assert.IsTrue(bindings[2].NotifyOnValidationError);
            });

            this.EnqueueTestComplete();
        }

        /// <summary>
        /// Ensure that fields are autogenerated properly with DisplayAttribute.Order.
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Description("Ensure that fields are autogenerated properly with DisplayAttribute.Order.")]
        public void AutoGenerateFieldsWithOrder()
        {
            this.EnqueueCallback(() =>
            {
                this.DataForm.CurrentItem = new DataClassWithOrder();
            });

            this.AddToPanelAndWaitForLoad();

            this.EnqueueCallback(() =>
            {
                Assert.AreEqual(5, this.DataForm.Fields.Count);
                Binding[] bindings = this.GetBindings();

                Assert.AreEqual("IntPropertyWithoutBindableAttribute", bindings[0].Path.Path);
                Assert.AreEqual(BindingMode.TwoWay, bindings[0].Mode);
                Assert.IsTrue(bindings[0].ValidatesOnExceptions);
                Assert.IsTrue(bindings[0].NotifyOnValidationError);

                Assert.AreEqual("DateTimeProperty", bindings[1].Path.Path);
                Assert.AreEqual(BindingMode.OneWay, bindings[1].Mode);
                Assert.IsFalse(bindings[1].ValidatesOnExceptions);
                Assert.IsFalse(bindings[1].NotifyOnValidationError);

                Assert.AreEqual("StringProperty", bindings[2].Path.Path);
                Assert.AreEqual(BindingMode.TwoWay, bindings[2].Mode);
                Assert.IsTrue(bindings[2].ValidatesOnExceptions);
                Assert.IsTrue(bindings[2].NotifyOnValidationError);

                Assert.AreEqual("BoolProperty", bindings[3].Path.Path);
                Assert.AreEqual(BindingMode.TwoWay, bindings[3].Mode);
                Assert.IsTrue(bindings[3].ValidatesOnExceptions);
                Assert.IsTrue(bindings[3].NotifyOnValidationError);

                Assert.AreEqual("IntProperty", bindings[4].Path.Path);
                Assert.AreEqual(BindingMode.OneWay, bindings[4].Mode);
                Assert.IsFalse(bindings[4].ValidatesOnExceptions);
                Assert.IsFalse(bindings[4].NotifyOnValidationError);
            });

            this.EnqueueTestComplete();
        }

        /// <summary>
        /// Expect a class with a given bindable attribute.
        /// </summary>
        /// <param name="bindable">Whether Bindable is set to true.</param>
        /// <param name="bindingMode">The value of BindingMode.</param>
        private void ExpectClassBindableAttribute(bool bindable, BindingMode bindingMode)
        {
            this.AddToPanelAndWaitForLoad();

            this.EnqueueCallback(() =>
            {
                if (bindable)
                {
                    Assert.AreEqual(5, this.DataForm.Fields.Count);
                    Binding[] bindings = this.GetBindings();

                    Assert.AreEqual("BoolProperty", bindings[0].Path.Path);
                    Assert.AreEqual(BindingMode.TwoWay, bindings[0].Mode);
                    Assert.IsTrue(bindings[0].ValidatesOnExceptions);
                    Assert.IsTrue(bindings[0].NotifyOnValidationError);
                    Assert.IsInstanceOfType(this.DataForm.Fields[0], typeof(DataFormCheckBoxField));

                    Assert.AreEqual("DateTimeProperty", bindings[1].Path.Path);
                    Assert.AreEqual(BindingMode.OneWay, bindings[1].Mode);
                    Assert.IsFalse(bindings[1].ValidatesOnExceptions);
                    Assert.IsFalse(bindings[1].NotifyOnValidationError);
                    Assert.IsInstanceOfType(this.DataForm.Fields[1], typeof(DataFormDateField));

                    Assert.AreEqual("IntProperty", bindings[2].Path.Path);
                    Assert.AreEqual(BindingMode.OneWay, bindings[2].Mode);
                    Assert.IsFalse(bindings[2].ValidatesOnExceptions);
                    Assert.IsFalse(bindings[2].NotifyOnValidationError);
                    Assert.IsInstanceOfType(this.DataForm.Fields[2], typeof(DataFormTextField));

                    Assert.AreEqual("IntPropertyWithoutBindableAttribute", bindings[3].Path.Path);
                    Assert.AreEqual(bindingMode, bindings[3].Mode);

                    if (bindings[3].Mode == BindingMode.TwoWay)
                    {
                        Assert.IsTrue(bindings[3].ValidatesOnExceptions);
                        Assert.IsTrue(bindings[3].NotifyOnValidationError);
                    }
                    else
                    {
                        Assert.IsFalse(bindings[3].ValidatesOnExceptions);
                        Assert.IsFalse(bindings[3].NotifyOnValidationError);
                    }

                    Assert.IsInstanceOfType(this.DataForm.Fields[3], typeof(DataFormTextField));

                    Assert.AreEqual("StringProperty", bindings[4].Path.Path);
                    Assert.AreEqual(BindingMode.TwoWay, bindings[4].Mode);
                    Assert.IsTrue(bindings[4].ValidatesOnExceptions);
                    Assert.IsTrue(bindings[4].NotifyOnValidationError);
                    Assert.IsInstanceOfType(this.DataForm.Fields[4], typeof(DataFormTextField));
                }
                else
                {
                    Assert.AreEqual(0, this.DataForm.Fields.Count);
                }
            });

            this.EnqueueTestComplete();
        }

        /// <summary>
        /// Get the bindings on the <see cref="DataForm"/>.
        /// </summary>
        /// <returns>The bindings.</returns>
        private Binding[] GetBindings()
        {
            Binding[] bindings = new Binding[this.DataForm.Fields.Count];

            for (int i = 0; i < this.DataForm.Fields.Count; i++)
            {
                DataFormBoundField boundField = this.DataForm.Fields[i] as DataFormBoundField;
                Assert.IsNotNull(boundField);
                Assert.IsNotNull(boundField.Binding);
                bindings[i] = boundField.Binding;
            }

            return bindings;
        }

        /// <summary>
        /// Handles the situation where the <see cref="DataForm"/> auto-generates a field.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The event args.</param>
        private void OnDataFormAutoGeneratingField(object sender, DataFormAutoGeneratingFieldEventArgs e)
        {
            switch (e.PropertyName)
            {
                case "BoolProperty":
                    e.Cancel = true;
                    break;

                case "IntProperty":
                    {
                        DataFormComboBoxField comboBoxField = new DataFormComboBoxField();
                        comboBoxField.ItemsSource = new IntCollection();
                        comboBoxField.Binding = (e.Field as DataFormBoundField).Binding;
                        e.Field = comboBoxField;
                    }

                    break;
            }
        }
    }
}
