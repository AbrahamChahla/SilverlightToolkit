//-----------------------------------------------------------------------
// <copyright company="Microsoft">
//      (c) Copyright Microsoft Corporation.
//      This source is subject to the Microsoft Public License (Ms-PL).
//      Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
//      All other rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace System.Windows.Controls
{
    using System.Collections.Generic;
    using System.Windows.Controls.Common;
    using System.Windows.Data;
    using System.Windows.Media;

    /// <summary>
    /// Base class of DataForm fields.  Generates the controls and labels that will be inserted
    /// into the control DataFormFieldContainer.
    /// </summary>
    /// <QualityBand>Preview</QualityBand>
    public abstract class DataFormField : DependencyObject
    {
        /// <summary>
        /// Identifies the IsEditModeReadOnly dependency property.
        /// </summary>
        public static readonly DependencyProperty IsEditModeReadOnlyProperty =
            DependencyProperty.Register(
                "IsEditModeReadOnly",
                typeof(bool),
                typeof(DataFormField),
                new PropertyMetadata(OnIsEditModeReadOnlyChanged));

        /// <summary>
        /// Identifies the IsReadOnly dependency property.
        /// </summary>
        public static readonly DependencyProperty IsReadOnlyProperty =
            DependencyProperty.Register(
                "IsReadOnly",
                typeof(bool),
                typeof(DataFormField),
                new PropertyMetadata(OnIsReadOnlyChanged));

        /// <summary>
        /// Private accessor to IsDataFormCurrentItemNull.
        /// </summary>
        private bool _isDataFormCurrentItemNull;

        /// <summary>
        /// Private accessor to OwningForm.
        /// </summary>
        private DataForm _owningForm;

        /// <summary>
        /// Constructs a new instance of DataFormField.
        /// </summary>
        protected DataFormField()
        {
            this.ShouldGenerateNewElement = true;
            this._isDataFormCurrentItemNull = true;
        }

        /// <summary>
        /// Flags the fact that the owning form has changed.
        /// </summary>
        internal event EventHandler OwningFormChanged;

        /// <summary>
        /// Flags the fact that the state of the DataForm's current item being null changed.
        /// </summary>
        internal event EventHandler IsDataFormCurrentItemNullChanged;

        /// <summary>
        /// Gets a value indicating whether or not this field has been auto-generated.
        /// </summary>
        public bool IsAutoGenerated
        {
            get;
            internal set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether or not the input control should be
        /// read-only in edit mode.
        /// </summary>
        public bool IsEditModeReadOnly
        {
            get
            {
                return (bool)this.GetValue(DataFormField.IsEditModeReadOnlyProperty);
            }

            set
            {
                this.SetValue(DataFormField.IsEditModeReadOnlyProperty, value);
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether or not the input control should be
        /// read-only.
        /// </summary>
        public bool IsReadOnly
        {
            get
            {
                return (bool)this.GetValue(DataFormField.IsReadOnlyProperty);
            }

            set
            {
                this.SetValue(DataFormField.IsReadOnlyProperty, value);
            }
        }

        /// <summary>
        /// Gets a value indicating whether or not the input control is valid.
        /// </summary>
        public bool IsValid
        {
            get
            {
                if (this.Element != null)
                {
                    return !ValidationUtil.ElementHasErrors(this.Element);
                }
                else
                {
                    return true;
                }
            }
        }

        /// <summary>
        /// Gets the binding expressions associated with this field.
        /// </summary>
        internal IList<BindingExpression> BindingExpressions
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether or not the input control should be
        /// read-only in edit mode, taking into account both IsReadOnly and anything else a child
        /// class may provide.
        /// </summary>
        internal virtual bool EffectiveIsEditModeReadOnly
        {
            get
            {
                return this.IsEditModeReadOnly;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether or not the input control should be
        /// read-only, taking into account both IsReadOnly and anything else a child
        /// class may provide.
        /// </summary>
        internal virtual bool EffectiveIsReadOnly
        {
            get
            {
                return this.IsReadOnly;
            }
        }

        /// <summary>
        /// Gets or sets the element generated from GenerateElement() or GenerateEditingElement().
        /// </summary>
        internal FrameworkElement Element
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether or not the current item on the DataForm
        /// is null.
        /// </summary>
        internal bool IsDataFormCurrentItemNull
        {
            get
            {
                return this._isDataFormCurrentItemNull;
            }

            set
            {
                if (value != this._isDataFormCurrentItemNull)
                {
                    this._isDataFormCurrentItemNull = value;
                    this.OnIsDataFormCurrentItemNullChanged(EventArgs.Empty);

                    if (this.OwningForm != null && this.OwningForm.UIGenerated)
                    {
                        this.OwningForm.GenerateUI();
                    }
                }
            }
        }

        /// <summary>
        /// Gets the DataForm hosting this field.
        /// </summary>
        internal DataForm OwningForm
        {
            get
            {
                return this._owningForm;
            }

            set
            {
                if (value != this._owningForm)
                {
                    this._owningForm = value;
                    this.OnOwningFormChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether or not the mode has changed
        /// since the last time an element was generated.
        /// </summary>
        internal bool ShouldGenerateNewElement
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the current mode for this field.
        /// </summary>
        internal DataFormMode Mode
        {
            get;
            set;
        }

        /// <summary>
        /// Generates the display input control and gives it a name.
        /// </summary>
        /// <returns>The display input control.</returns>
        internal FrameworkElement GenerateElementInternal()
        {
            this.Element = this.GenerateElement();

            if (this.Element != null)
            {
                DataFormBoundField boundField = this as DataFormBoundField;

                if (boundField != null)
                {
                    this.Element.Style = boundField.ElementStyle;
                }

                this.ShouldGenerateNewElement = false;
            }

            return this.Element;
        }

        /// <summary>
        /// Generates the edit input control and gives it a name.
        /// </summary>
        /// <returns>The edit input control.</returns>
        internal FrameworkElement GenerateEditingElementInternal()
        {
            this.Element = this.GenerateEditingElement(this.EffectiveIsEditModeReadOnly || this.EffectiveIsReadOnly);

            if (this.Element != null)
            {
                this.Element.GotFocus += new RoutedEventHandler(this.OnElementGotFocus);
                this.Element.LostFocus += new RoutedEventHandler(this.OnElementLostFocus);
                this.BindingExpressions = ValidationUtil.GetBindingExpressionsForElement(this.Element);

                DataFormBoundField boundField = this as DataFormBoundField;

                if (boundField != null)
                {
                    this.Element.Style = boundField.EditingElementStyle;
                }

                Control control = this.Element as Control;

                if (control != null && this.OwningForm != null)
                {
                    control.TabIndex = this.OwningForm.GetNextTabIndex();
                }

                this.ShouldGenerateNewElement = false;
            }

            return this.Element;
        }

        /// <summary>
        /// Generates the insert input control and gives it a name.
        /// </summary>
        /// <returns>The insert input control.</returns>
        internal FrameworkElement GenerateInsertElementInternal()
        {
            this.Element = this.GenerateInsertElement(this.EffectiveIsReadOnly);

            if (this.Element != null)
            {
                this.Element.GotFocus += new RoutedEventHandler(this.OnElementGotFocus);
                this.Element.LostFocus += new RoutedEventHandler(this.OnElementLostFocus);
                this.BindingExpressions = ValidationUtil.GetBindingExpressionsForElement(this.Element);

                DataFormBoundField boundField = this as DataFormBoundField;

                if (boundField != null)
                {
                    this.Element.Style = boundField.InsertElementStyle;
                }

                Control control = this.Element as Control;

                if (control != null && this.OwningForm != null)
                {
                    control.TabIndex = this.OwningForm.GetNextTabIndex();
                }

                this.ShouldGenerateNewElement = false;
            }

            return this.Element;
        }

        /// <summary>
        /// Fires the event IsDataFormCurrentItemNullChanged.
        /// </summary>
        /// <param name="e">The event args.</param>
        internal virtual void OnIsDataFormCurrentItemNullChanged(EventArgs e)
        {
            EventHandler handler = this.IsDataFormCurrentItemNullChanged;
            if (handler != null)
            {
                handler(this, e);
            }
        }

        /// <summary>
        /// Fires the event OwningFormChanged.
        /// </summary>
        /// <param name="e">The event args.</param>
        internal virtual void OnOwningFormChanged(EventArgs e)
        {
            EventHandler handler = this.OwningFormChanged;
            if (handler != null)
            {
                handler(this, e);
            }
        }

        /// <summary>
        /// Commits this field's edit.
        /// </summary>
        protected void CommitEdit()
        {
            if (this.OwningForm != null)
            {
                this.OwningForm.CommitFieldEdit(this);
            }
        }

        /// <summary>
        /// Generates the display input control.
        /// </summary>
        /// <returns>The display input control.</returns>
        protected abstract FrameworkElement GenerateElement();

        /// <summary>
        /// Generates the edit input control.
        /// </summary>
        /// <param name="isReadOnly">Whether or not the element should be read-only.</param>
        /// <returns>The edit input control.</returns>
        protected abstract FrameworkElement GenerateEditingElement(bool isReadOnly);

        /// <summary>
        /// Generates the insert input control.
        /// </summary>
        /// <param name="isReadOnly">Whether or not the element should be read-only.</param>
        /// <returns>The insert input control.</returns>
        protected abstract FrameworkElement GenerateInsertElement(bool isReadOnly);

        /// <summary>
        /// Prepares a field for editing.
        /// </summary>
        /// <param name="element">The element.</param>
        protected virtual void PrepareFieldForEdit(FrameworkElement element)
        {
        }

        /// <summary>
        /// IsEditModeReadOnly property changed handler.
        /// </summary>
        /// <param name="d">DataFormField that changed its IsEditModeReadOnly value.</param>
        /// <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        private static void OnIsEditModeReadOnlyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            DataFormField field = d as DataFormField;
            if (field != null && !field.AreHandlersSuspended())
            {
                if (field.OwningForm != null && field.OwningForm.UIGenerated)
                {
                    field.OwningForm.GenerateUI();
                }
            }
        }

        /// <summary>
        /// IsReadOnly property changed handler.
        /// </summary>
        /// <param name="d">DataFormField that changed its IsReadOnly value.</param>
        /// <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        private static void OnIsReadOnlyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            DataFormField field = d as DataFormField;
            if (field != null && !field.AreHandlersSuspended())
            {
                if (field.OwningForm != null && field.OwningForm.UIGenerated)
                {
                    field.OwningForm.GenerateUI();
                }
            }
        }

        /// <summary>
        /// Handles the case where the editing element got focus.
        /// </summary>
        /// <param name="sender">The editing element.</param>
        /// <param name="e">The event args.</param>
        private void OnElementGotFocus(object sender, RoutedEventArgs e)
        {
            this.PrepareFieldForEdit(this.Element);
        }

        /// <summary>
        /// Handles the case where the editing element lost focus.
        /// </summary>
        /// <param name="sender">The editing element.</param>
        /// <param name="e">The event args.</param>
        private void OnElementLostFocus(object sender, RoutedEventArgs e)
        {
            this.CommitEdit();
        }
    }
}
