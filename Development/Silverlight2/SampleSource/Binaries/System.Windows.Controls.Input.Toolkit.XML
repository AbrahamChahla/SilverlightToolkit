<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Input.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AutoComplete_OnMaxDropDownHeightPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid maximum drop down height value &apos;{0}&apos;. The value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AutoComplete_OnMinimumPopulateDelayPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid MinimumPopulateDelay value &apos;{0}&apos;. The value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AutoComplete_OnSearchModePropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid SearchMode enumeration value. The value must be one of the defined AutoCompleteSearchMode values to be accepted..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AutoComplete_OnSearchTextPropertyChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SearchText..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AutoComplete_OnSelectedItemPropertyChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SelectedItem..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_CurrentIndex_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid index value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_InvalidInputAction_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid InvalidInputAction value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidDoubleValue_InvalidDoubleValue">
            <summary>
              Looks up a localized string similar to Invalid double value &apos;{0}&apos;: valid value is of double type and within decimal range..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidIncrementValue_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Increment value &apos;{0}&apos;: valid value is of double type, within decimal range, and positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_OnDecimalPlacesPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid DecimalPlaces value &apos;{0}&apos;: valid value is of int type and within 0 and 15 inclusive..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ObservableObjectCollection_ReadOnly">
            <summary>
              Looks up a localized string similar to The collection is currently ReadOnly and should not be modified..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_OnMaxDropDownHeightPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid maximum drop down height value &apos;{0}&apos;. The value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_PopupButtonModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupButtonMode value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RoutedPropertyChangingEventArgs_CancelSet_InvalidOperation">
            <summary>
              Looks up a localized string similar to The RoutedPropertyChangingEvent cannot be canceled!.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Spinner_SpinNotValid">
            <summary>
              Looks up a localized string similar to Spin action is not valid at this moment..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupTimeSelectionModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupTimeSelectionMode for this popup, value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UpDown_ParseException">
            <summary>
              Looks up a localized string similar to Cannot parse text &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.ScrollExtensions">
            <summary>
            The ScrollExtensions class provides utility methods for scrolling items
            ScrollViewers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ScrollExtensions.LineChange">
            <summary>
            The amount to scroll a ScrollViewer for a line change.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollByVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer vertically by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The vertical offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollByHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer horizontally by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The horizontal offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollToTop(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the top.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollToBottom(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the bottom.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.GetTopAndBottom(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Double@,System.Double@)">
            <summary>
            Get the top and bottom of an element with respect to its parent.
            </summary>
            <param name="element">The element to get the position of.</param>
            <param name="parent">The parent of the element.</param>
            <param name="top">Vertical offset to the top of the element.</param>
            <param name="bottom">
            Vertical offset to the bottom of the element.
            </param>
        </member>
        <member name="T:System.Windows.Controls.BindingEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.BindingEvaluator`1._binding">
            <summary>
            Gets or sets the string value binding used by the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.BindingEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.#ctor">
            <summary>
            Initializes a new instance of the BindingEvaluator class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingEvaluator class,
            setting the initial binding to the provided parameter.
            </summary>
            <param name="binding">The initial string value binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.ClearDataContext">
            <summary>
            Clears the data context so that the control does not keep a
            reference to the last-looked up item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object,System.Boolean)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <param name="clearDataContext">If set to true, this parameter will
            clear the data context immediately after retrieving the value.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="P:System.Windows.Controls.BindingEvaluator`1.Value">
            <summary>
            Gets or sets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingEvaluator`1.ValueBinding">
            <summary>
            Gets or sets the value binding.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.VisualTreeExtensions">
            <summary>
            A static class providing methods for working with the visual tree.  
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual children of a framework element.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The visual children of the framework element.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualTreeExtensions.GetLogicalChildrenBreadthFirst(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search.  A visual element is assumed to be a logical 
            child of another visual element if they are in the same namescope.
            For performance reasons this method manually manages the queue 
            instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="T:System.Windows.Controls.Extensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="T:System.Windows.Controls.AutoCompleteBox">
            <summary>
            Represents a control that provides a text box for user input and a 
            drop-down that contains possible matches based on the input in the 
            text box.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ElementSelectionAdapter">
            <summary>
            Specifies the name of the ListBox TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ElementDropDownToggle">
            <summary>
            Specifies the name of the ToggleButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ElementPopup">
            <summary>
            Specifies the name of the Popup TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ElementTextBox">
            <summary>
            The name for the text box part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ElementTextBoxStyle">
            <summary>
            The name for the text box style.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ElementItemContainerStyle">
            <summary>
            The name for the adapter's item container style.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.MinimumPrefixLengthProperty">
            <summary>
            Identifies the MinimumPrefixLength dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnMinimumPrefixLengthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumPrefixLengthProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its MinimumPrefixLength.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.MinimumPopulateDelayProperty">
            <summary>
            Identifies the MinimumPopulateDelay dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnMinimumPopulateDelayPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumPopulateDelayProperty property changed handler. Any current 
            dispatcher timer will be stopped. The timer will not be restarted 
            until the next TextUpdate call by the user.
            </summary>
            <param name="d">AutoCompleteTextBox that changed its 
            MinimumPopulateDelay.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty">
            <summary>
            Identifies the IsTextCompletionEnabled dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ItemTemplateProperty">
            <summary>
            Identifies the ItemTemplate dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.TextBoxStyleProperty">
            <summary>
            Identifies the TextBoxStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.MaxDropDownHeightProperty">
            <summary>
            Identifies the MaxDropDownHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnMaxDropDownHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxDropDownHeightProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteTextBox that changed its MaxDropDownHeight.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.IsDropDownOpenProperty">
            <summary>
            Identifies the IsDropDownOpen dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnIsDropDownOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteTextBox that changed its IsDropDownOpen.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its ItemsSource.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler. Fires the 
            SelectionChanged event. The event data will contain any non-null
            removed items and non-null additions.
            </summary>
            <param name="d">AutoCompleteBox that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnSelectedItemChanged(System.Object)">
            <summary>
            Called when the selected item is changed, updates the text value
            that is displayed in the text box part.
            </summary>
            <param name="newItem">The new item.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TextProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its Text.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.SearchTextProperty">
            <summary>
            Identifies the SearchText dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnSearchTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnSearchTextProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its SearchText.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.SearchModeProperty">
            <summary>
            Identifies the SearchMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnSearchModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SearchModeProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its SearchMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.ItemFilterProperty">
            <summary>
            Identifies the ItemFilter dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnItemFilterPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemFilterProperty property changed handler.
            </summary>
            <param name="d">AutoCompleteBox that changed its ItemFilter.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox.TextFilterProperty">
            <summary>
            Identifies the TextFilter dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox._toggleButton">
            <summary>
            The toggle button template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox._text">
            <summary>
            The TextBox template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteBox._adapter">
            <summary>
            The SelectionAdapter.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.#ctor">
            <summary>
            Initializes a new instance of the AutoCompleteBox control class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges and sizes the AutoCompleteBox control and its contents.
            </summary>
            <param name="finalSize">The size allowed for the AutoCompleteBox 
            control.</param>
            <returns>The finalSize, unchanged.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the AutoCompleteBox control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnCreateAutomationPeer">
            <summary>
            Returns a AutoCompleteBoxAutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>A AutoCompleteBoxAutomationPeer for the AutoCompleteBox 
            object.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control 
            currently has the focus.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.HasFocus">
            <summary>
            Checks to see if the control has focus currently.
            </summary>
            <returns>Returns a value indicating whether the control or its popup
            have focus.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">
            A RoutedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">
            A RoutedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.ControlIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.TryGetSelectionAdapter(System.Object)">
            <summary>
            Returns the specified object as an ISelectionAdapter, if possible.
            </summary>
            <param name="value">
            The object to retrieve as an ISelectionAdapter.
            </param>
            <returns>
            A ISelectionAdapter object, if possible. Otherwise, null reference 
            (Nothing in Visual Basic).
            </returns>
            <remarks>
            This method returns the specified object as an ISelectionAdapter to 
            provide the selection adaptor for the drop-down portion of the 
            AutoCompleteBox control. 
            If the specified object implements ISelectionAdapter or derives 
            from Selector, it will automatically be returned as an 
            ISelectionAdapter object; otherwise TryGetSelectionAdapter 
            returns a null reference (Nothing in Visual Basic). 
            To provide a custom selection mechanism, override this method 
            in a derived class and return your custom selection adapter as an 
            ISelectionAdapter. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.PopulateDropDown(System.Object,System.EventArgs)">
            <summary>
            Handles the timer tick when using a populate delay.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnPopulating(System.Windows.Controls.PopulatingEventArgs)">
            <summary>
            Raises the Populating event.
            </summary>
            <param name="e">
            A PopulatingEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnPopulated(System.Windows.Controls.PopulatedEventArgs)">
            <summary>
            Raises the Populated event.
            </summary>
            <param name="e">
            A PopulatedEventArgs that contains the event data. 
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the SelectionChanged event.
            </summary>
            <param name="e">
            A SelectionChangedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownOpening(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpening event.
            </summary>
            <param name="e">
            A RoutedPropertyChangingEventArgs(T) that contains 
            the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpened event.
            </summary>
            <param name="e">A RoutedPropertyChangedEventArgs(t) that contains 
            the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownClosing(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosing.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation 
            and halt closing the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosed event.
            </summary>
            <param name="e">A RoutedPropertyChangedEventArgs(T) which contains 
            the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.FormatValue(System.Object,System.Boolean)">
            <summary>
            Formats an Item for text comparisons based on Converter 
            and ConverterCulture properties.
            </summary>
            <param name="value">The object to format.</param>
            <param name="clearDataContext">A value indicating whether to clear
            the data context after the lookup is performed.</param>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.FormatValue(System.Object)">
            <summary>
            Formats an Item for text comparisons based on Converter 
            and ConverterCulture properties.
            </summary>
            <param name="value">The object to format.</param>
            <returns>Formatted Value.</returns>
            <remarks>
            Override this method to provide a custom string conversion.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnTextChanged(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the TextChanged event.
            </summary>
            <param name="e">
            A RoutedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnTextBoxTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handle the TextChanged event that is directly attached to the 
            TextBox part. This ensures that only user initiated actions will 
            result in an AutoCompleteBox suggestion and operation.
            </summary>
            <param name="sender">The source TextBox object.</param>
            <param name="e">The TextChanged event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnTextBoxSelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When selection changes, save the location of the selection start.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.UpdateTextValue(System.String)">
            <summary>
            Updates both the text box value and underlying text dependency 
            property value if and when they change. Automatically fires the 
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.UpdateTextValue(System.String,System.Nullable{System.Boolean})">
            <summary>
            Updates both the text box value and underlying text dependency 
            property value if and when they change. Automatically fires the 
            text changed events when there is a change.
            </summary>
            <param name="value">The new string value.</param>
            <param name="userInitiated">A nullable bool value indicating whether
            the action was user initiated. In a user initiated mode, the 
            underlying text dependency property is updated. In a non-user 
            interaction, the text box value is updated. When user initiated is 
            null, all values are updated.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.TextUpdated(System.String,System.Boolean)">
            <summary>
            Handle the update of the text for the control from any source, 
            including the TextBox part and the Text dependency property.
            </summary>
            <param name="newText">The new text.</param>
            <param name="userInitiated">A value indicating whether the update 
            is a user-initiated action. This should be a True value when the 
            TextUpdated method is called from a TextBox event handler.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.PopulateComplete">
            <summary>
            Notifies the AutoCompleteBox that the ItemsSource property has been 
            set and the data can be filtered to provide possible matches in the 
            drop-down.
            </summary>
            <remarks>
            Call this method when you are providing custom population of 
            the drop-down portion of the AutoCompleteBox, to signal the control 
            that you are done with the population process. 
            Typically, you use PopulateComplete when the population process 
            is a long-running process and you want to cancel built-in filtering
             of the ItemsSource items. In this case, you can handle the 
            Populated event and set PopulatingEventArgs.Cancel to true. 
            When the long-running process has completed you call 
            PopulateComplete to indicate the drop-down is populated.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.UpdateTextCompletion(System.Boolean)">
            <summary>
            Performs text completion, if enabled, and a lookup on the underlying
            item values for an exact match. Will update the SelectedItem value.
            </summary>
            <param name="userInitiated">A value indicating whether the operation
            was user initiated. Text completion will not be performed when not 
            directly initiated by the user.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.TryGetMatch(System.String,System.Collections.ObjectModel.ObservableCollection{System.Object},System.Windows.Controls.AutoCompleteSearchPredicate{System.String})">
            <summary>
            Attempts to look through the view and locate the specific exact 
            text match.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="view">The view reference.</param>
            <param name="predicate">The predicate to use for the partial or 
            exact match.</param>
            <returns>Returns the object or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.ClearView">
            <summary>
            A simple helper method to clear the view and ensure that a view 
            object is always present and not null.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.RefreshView">
            <summary>
            Walks through the items enumeration. Performance is not going to be 
            perfect with the current implementation.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Handle any change to the ItemsSource dependency property, update 
            the underlying ObservableCollection view, and set the selection 
            adapter's ItemsSource to the view if appropriate.
            </summary>
            <param name="oldValue">The old enumerable reference.</param>
            <param name="newValue">The new enumerable reference.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnAdapterSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnAdapterSelectionComplete(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Commit event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnAdapterSelectionCanceled(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Cancel event on the selection adapter.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnMaxDropDownHeightChanged(System.Double)">
            <summary>
            Handles MaxDropDownHeightChanged by re-arranging and updating the 
            popup arrangement.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OpenDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly opens the popup, checks the expander 
            button, and then fires the Opened event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.CloseDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly closes the popup, flips the Checked 
            value, and then fires the Closed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.PopupChild_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.PopupChild_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.PopupChild_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.PopupChild_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.PopupChild_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OutsidePopup_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.ArrangePopup">
            <summary>
            Arrange the drop down popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.ToggleDropDown(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Toggles the drop down visibility. If visible, the text updated 
            method will be called, eventually refreshing the selection adapter's
            view and making the appropriate visibility call on the drop down. 
            If no items are in the filtered view, the drop down will not be 
            displayed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">
            A KeyEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnTextBoxKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event when the IsDropDownOpen 
            property is false.
            </summary>
            <param name="e">
            A KeyEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.OnDropDownKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event when the IsDropDownOpen 
            property is true.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteBox.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.Items">
            <summary>
            Gets or sets a local cached copy of the items data.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.View">
            <summary>
            Gets or sets the observable collection that contains references to 
            all of the items in the generated view of data that is provided to 
            the selection-style control adapter.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.IgnoreTextPropertyChange">
            <summary>
            Gets or sets a value to ignore a number of pending change handlers. 
            The value is decremented after each use. This is used to reset the 
            value of properties without performing any of the actions in their 
            change handlers.
            </summary>
            <remarks>The int is important as a value because the TextBox 
            TextChanged event does not immediately fire, and this will allow for
            nested property changes to be ignored.</remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.IgnorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending 
            change handlers. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.IgnoreTextSelectionChange">
            <summary>
            Gets or sets a value indicating whether to ignore the selection 
            changed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.SkipSelectedItemTextUpdate">
            <summary>
            Gets or sets a value indicating whether to skip the text update 
            processing when the selected item is updated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.TextSelectionStart">
            <summary>
            Gets or sets the last observed text box selection start location.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.UserCalledPopulate">
            <summary>
            Gets or sets a value indicating whether the user initiated the 
            current populate call.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.PopupClosedVisualState">
            <summary>
            Gets or sets a value indicating whether a visual popup state is 
            being used in the current template for the Closed state. Setting 
            this value to true will delay the actual setting of Popup.IsOpen 
            to false until after the visual state's transition for Closed is 
            complete.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.DelayTimer">
            <summary>
            Gets or sets the DispatcherTimer used for the MinimumPopulateDelay 
            condition for auto completion.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.AllowWrite">
            <summary>
            Gets or sets a value indicating whether a read-only dependency 
            property change handler should allow the value to be set.  This is 
            used to ensure that read-only properties cannot be changed via 
            SetValue, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.ValueBindingEvaluator">
            <summary>
            Gets or sets the BindingEvaluator, a framework element that can
            provide updated string values from a single binding.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.MinimumPrefixLength">
            <summary>
            Gets or sets the minimum number of characters required to be entered 
            in the text box before the AutoCompleteBox displays possible 
            matches.
            </summary>
            <value>
            The minimum number of characters to be entered in the text box 
            before the AutoCompleteBox displays possible matches. 
            The default is 1.
            </value>
            <remarks>
            If you set MinimumPrefixLength to -1, the AutoCompleteBox will 
            not provide possible matches. There is no maximum value, but 
            setting MinimumPrefixLength to value that is too large will 
            prevent the AutoCompleteBox from providing possible matches as well. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.MinimumPopulateDelay">
            <summary>
            Gets or sets the minimum delay, in milliseconds, after text is typed 
            in the text box before the AutoCompleteBox control populates the 
            list of possible matches in the drop-down.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.IsTextCompletionEnabled">
            <summary>
            Gets or sets a value indicating whether the first possible match
            found during the filtering process will be displayed automatically 
            in the text box.
            </summary>
            <value>
            True if the first possible match found will be displayed 
            automatically in the text box; otherwise, false. The default is 
            false.
            </value>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display each 
            item in the drop-down portion of the control.
            </summary>
            <remarks>
            You use the ItemTemplate property to specify the visualization 
            of the data objects in the drop-down portion of the AutoCompleteBox 
            control. If your AutoCompleteBox is bound to a collection and you 
            do not provide specific display instructions by using a 
            DataTemplate, the resulting UI of each item is a string 
            representation of each object in the underlying collection. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the selection adapter 
            contained in the drop-down portion of the AutoCompleteBox control.
            </summary>
            <remarks>
            The default selection adapter contained in the drop-down is a 
            ListBox control. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.TextBoxStyle">
            <summary>
            Gets or sets the Style applied to the text box portion of 
            the AutoCompleteBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the 
            AutoCompleteBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down 
            portion of the control is open.
            </summary>
            <value>
            True if the drop-down is open; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the items for the
            drop-down portion of the AutoCompleteBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.SelectedItem">
            <summary>
            Gets or sets the selected item in the drop-down.
            </summary>
            <remarks>
            If the IsTextCompletionEnabled property is true and text typed by 
            the user matches an item in the ItemsSource collection, which is 
            then displayed in the text box, the SelectedItem property will be 
            a null reference.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.Text">
            <summary>
            Gets or sets the text in the text box portion of the 
            AutoCompleteBox control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.SearchText">
            <summary>
            Gets the text that is used to filter items in the 
            ItemsSource item collection. 
            </summary>
            <remarks>
            The SearchText value is typically the same as the 
            Text property, but is set after the TextChanged event occurs 
            and before the Populating event.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.SearchMode">
            <summary>
            Gets or sets how the text in the text box is used to filter items 
            specified by the ItemsSource property for display in the drop-down.
            </summary>
            <remarks>
            Use the SearchMode property to specify how possible matches are 
            filtered. For example, possible matches can be filtered in a 
            predefined or custom way. The search mode is automatically set 
            to Custom if you set the ItemFilter property. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.ItemFilter">
            <summary>
            Gets or sets the custom method that uses the text in the text box to
            filter the items specified by the ItemsSource property for 
            display in the drop-down.
            </summary>
            <remarks>
            The search mode is automatically set to Custom if you set the 
            ItemFilter property. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.TextFilter">
            <summary>
            Gets or sets the custom method that uses the text in the text box to 
            filter items specified by the ItemsSource property in a text-based
            way for display in the drop-down.
            </summary>
            <remarks>
            The search mode is automatically set to Custom if you set the 
            TextFilter property. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.DropDownToggleButton">
            <summary>
            Gets or sets the template's ToggleButton part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.DropDownPopup">
            <summary>
            Gets or sets the drop down popup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.TextBox">
            <summary>
            Gets or sets the Text template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.SelectionAdapter">
            <summary>
            Gets or sets the selection adapter used to populate the drop-down 
            with a list of selectable items. 
            </summary>
            <remarks>
            You can use this property when you create an automation peer to 
            use with AutoCompleteBox or deriving from AutoCompleteBox to 
            create a custom control.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.PopupChild">
            <summary>
            Gets or sets the popup child content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.OutsidePopupCanvas">
            <summary>
            Gets or sets the expansive area outside of the popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.PopupChildCanvas">
            <summary>
            Gets or sets the canvas for the popup child.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.TextChanged">
            <summary>
            Occurs when the text in the text box portion of the AutoCompleteBox 
            changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.Populating">
            <summary>
            Occurs when the AutoCompleteBox is populating the selection adapter 
            with possible matches based on the Text property.
            </summary>
            <remarks>
            If the event is canceled, by setting the PopulatingEventArgs.Cancel 
            property to true, the AutoCompleteBox will not automatically 
            populate the selection adapter contained in the drop-down. 
            In this case, if you want possible matches to appear, you must 
            provide the logic for populating the selection adapter.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.Populated">
            <summary>
            Occurs when the AutoCompleteBox has populated the selection adapter 
            with possible matches based on the Text property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is 
            changing from false to true. 
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed 
            from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to 
            false. 
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from 
            true to false and the drop-down is open.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AutoCompleteBox.SelectionChanged">
            <summary>
            Occurs when the selected item in the drop-down portion of the 
            AutoCompleteBox has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.IsEditable">
            <summary>
            Gets a value indicating whether the text in the text box is 
            editable by the user.
            </summary>
            <remarks>
            IsEditable always returns true, unless overridden in a derived class.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.AutoCompleteBox.ValueMemberBinding">
            <summary>
            Gets or sets the Binding object used for object to string 
            conversions.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer">
            <summary>
            Exposes AutoCompleteBox types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.AutoCompleteBoxClassNameCore">
            <summary>
            The name reported as the core class name.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.#ctor(System.Windows.Controls.AutoCompleteBox)">
            <summary>
            Initializes a new instance of the AutoCompleteBoxAutomationPeer
            class.
            </summary>
            <param name="owner">
            The AutoCompleteBox that is associated with this
            AutoCompleteBoxAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the AutoCompleteBox that is associated
            with this AutoCompleteBoxAutomationPeer. This method is called by
            GetAutomationControlType.
            </summary>
            <returns>ComboBox AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the AutoCompleteBox that is associated with this
            AutoCompleteBoxAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name AutoCompleteBox.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the AutoCompleteBox that is associated
            with this AutoCompleteBoxAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raises the ExpandCollapse automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
            <summary>
            Sets the control's text value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the AutoCompleteBox that
            are associated with this AutoCompleteBoxAutomationPeer. This method
            is called by GetChildren.
            </summary>
            <returns>
            A collection of automation peer elements, or an empty collection
            if there are no child elements.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is
            selected.
            </summary>
            <returns>A collection of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.OwnerAutoCompleteBox">
            <summary>
            Gets the AutoCompleteBox that owns this
            AutoCompleteBoxAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider allows
            more than one child element to be selected concurrently.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider requires
            at least one child element to be selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets an element's current Collapsed or Expanded state.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value is read only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.AutoCompleteBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
            <summary>
            Gets a string representation of the current text value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.AutoCompleteSearch">
            <summary>
            A predefined set of filter functions for the known, built-in 
            AutoCompleteSearchMode enumeration values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.GetFilter(System.Windows.Controls.AutoCompleteSearchMode)">
            <summary>
            Index function that retrieves the filter for the provided 
            AutoCompleteSearchMode.
            </summary>
            <param name="searchMode">The built-in search mode.</param>
            <returns>Returns the string-based comparison function.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.StartsWith(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.StartsWithCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.StartsWithOrdinal(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.StartsWithOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string value begins with the text.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.Contains(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value. The current 
            culture's case insensitive string comparison operator is used.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.ContainsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.ContainsOrdinal(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.ContainsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the prefix is contained in the string value.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.Equals(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.EqualsCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.EqualsOrdinal(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:System.Windows.Controls.AutoCompleteSearch.EqualsOrdinalCaseSensitive(System.String,System.String)">
            <summary>
            Check if the string values are equal.
            </summary>
            <param name="text">The AutoCompleteBox prefix text.</param>
            <param name="value">The item's string value.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="T:System.Windows.Controls.AutoCompleteSearchMode">
            <summary>
            Specifies how text in the text box portion of the AutoCompleteBox 
            control is used to filter items specified by the ItemsSource 
            property for display in the drop-down.
            </summary>
            <remarks>
            An ordinal filter is a filter that uses the Unicode values of strings 
            when performing comparisons.
            Use None when the data source performs its own filtering.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.None">
            <summary>
            Specifies that no filter is used. All items are returned.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.StartsWith">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the 
            returned items start with the specified text. The filter uses the 
            String.StartsWith method and the 
            StringComparer.CurrentCultureIgnoreCase property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.StartsWithCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the 
            returned items start with the specified text. 
            The filter uses the String.StartsWith method and the 
            StringComparer.CurrentCulture property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.StartsWithOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned 
            items start with the specified text. The filter uses the 
            String.StartsWith method and the StringComparer.OrdinalIgnoreCase 
            property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.StartsWithOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items 
            start with the specified text. 
            The filter uses the String.StartsWith method and the 
            StringComparer.Ordinal property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.Contains">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter 
            where the returned items contain the specified text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.ContainsCaseSensitive">
            <summary>
            MSpecifies a culture-sensitive, case-sensitive filter where 
            the returned items contain the specified text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.ContainsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the 
            returned items contain the specified text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.ContainsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned 
            items contain the specified text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.Equals">
            <summary>
            Specifies a culture-sensitive, case-insensitive filter where the 
            returned items equal the specified text. The filter uses the 
            String.Equals method and the 
            StringComparer.CurrentCultureIgnoreCase property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.EqualsCaseSensitive">
            <summary>
            Specifies a culture-sensitive, case-sensitive filter where the 
            returned items equals the specified text. The filter uses the 
            String.Equals method and the StringComparer.CurrentCulture property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.EqualsOrdinal">
            <summary>
            Specifies an ordinal, case-insensitive filter where the returned 
            items equal the specified text. The filter uses the String.Equals 
            method and the StringComparer.OrdinalIgnoreCase property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.EqualsOrdinalCaseSensitive">
            <summary>
            Specifies an ordinal, case-sensitive filter where the returned items
             equal the specified text. The filter uses the String.Equals 
            method and the StringComparer.Ordinal property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AutoCompleteSearchMode.Custom">
            <summary>
            Specifies that a custom filter is used. This mode is used when the 
            AutoCompleteBox.TextFilter or AutoCompleteBox.ItemFilter 
            properties are set. 
            </summary>
        </member>
        <member name="T:System.Windows.Controls.AutoCompleteSearchPredicate`1">
            <summary>
            Represents the filter used by the AutoCompleteBox control to determine 
            whether an item is a possible match for the specified text.
            </summary>
            <param name="search">The string used as the basis for filtering.</param>
            <param name="item">
            The item that is compared with the search parameter. 
            </param>
            <typeparam name="T">
            The type used for filtering the AutoCompleteBox. This type can be either 
            a string or an object.
            </typeparam>
            <returns>
            True to indicate item is a possible match for search; otherwise false.
            </returns>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.ISelectionAdapter">
            <summary>
            Defines an item collection, selection members, and key handling for the 
            selection adapter contained in the drop-down portion of an 
            AutoCompleteBox control.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ISelectionAdapter.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event that occurs when a key is 
            pressed while the drop-down portion of the AutoCompleteBox has focus.
            </summary>
            <param name="e">
            A KeyEventArgs that contains data about the KeyDown event.
            </param>
            <remarks>
            This method is called by the KeyDown method of the AutoCompleteBox, 
            when the drop-down portion of the AutoCompleteBox has focus. 
            The implementation should provide key handling for the selection 
            adapter.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ISelectionAdapter.CreateAutomationPeer">
            <summary>
            Returns an automation peer for the selection adapter, 
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            An automation peer for the selection adapter, if one is available; 
            otherwise, a null reference.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.ISelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ISelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the SelectedItem property value changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ISelectionAdapter.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the content of 
            the control.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ISelectionAdapter.Commit">
            <summary>
            Occurs when a selected item is committed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ISelectionAdapter.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PopulatedEventArgs">
            <summary>
            Provides data for the AutoCompleteBox.Populated event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.PopulatedEventArgs.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the PopulatedEventArgs.
            </summary>
            <param name="data">The IEnumerable of populated data.</param>
        </member>
        <member name="P:System.Windows.Controls.PopulatedEventArgs.Data">
            <summary>
            Gets the list of possible matches added to the drop-down 
            portion of the AutoCompleteBox control.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PopulatedEventHandler">
            <summary>
            Represents the method that will handle the Populated event of a 
            AutoCompleteBox control.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event arguments.</param>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.PopulatingEventArgs">
            <summary>
            Provides data for the AutoCompleteBox.Populating event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.PopulatingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PopulatingEventArgs.
            </summary>
            <param name="parameter">The population parameter, provided to 
            observers to be used in filtering suggestions.</param>
        </member>
        <member name="P:System.Windows.Controls.PopulatingEventArgs.Parameter">
            <summary>
            Gets the text that is used to determine which items to display 
            in the AutoCompleteBox control.
            </summary>
            <remarks>
            The Parameter property is equal to the SearchText property of the 
            AutoCompleteBox.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.PopulatingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the Populating event 
            should be canceled.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PopulatingEventHandler">
            <summary>
            Represents the method that will handle the Populating event of a 
            AutoCompleteBox control. 
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event arguments.</param>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.SelectorSelectionAdapter">
            <summary>
            Represents the selection adapter contained in the drop-down portion 
            of an AutoCompleteBox control.
            </summary>
            <remarks>
            <para>
            This class wraps a Selector control and implements the ISelectionAdapter 
            interface. A selection adapter is a part required by the AutoCompleteBox 
            control template. The SelectorSelectionAdapter provides custom behavior 
            for the AutoCompleteBox control, such as an item collection, selection 
            members, and key handling. 
            </para>
            <para>
            You can create a new template for the AutoCompleteBox and provide your 
            own ISelectionAdapter to provide custom selection functionality without 
            deriving from the AutoCompleteBox class.
            </para>
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SelectorSelectionAdapter._selector">
            <summary>
            The Selector instance.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.#ctor">
            <summary>
            Initializes a new instance of the SelectorSelectionAdapter class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.#ctor(System.Windows.Controls.Primitives.Selector)">
            <summary>
            Initializes a new instance of the SelectorSelectionAdapter class.
            </summary>
            <param name="selector">A selector control instance.</param>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.ResetScrollViewer">
            <summary>
            If the control contains a ScrollViewer, this will reset the viewer 
            to be scrolled to the top.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnSelectorMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse left button up event on the selector control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event on the Selector control.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The selection changed event data.</param>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.SelectedIndexIncrement">
            <summary>
            Increments the SelectedIndex property of the underlying Selector 
            control.
            </summary>
            <remarks>
            If the currently selected item is the last item in the collection, 
            SelectedIndex is set to -1.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.SelectedIndexDecrement">
            <summary>
            Decrements the SelectedIndex property of the underlying Selector 
            control.
            </summary>
            <remarks>
            If the currently selected item is the first item in the collection, 
            SelectedIndex is set to the index of the last item in the collection.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event that occurs when a key is 
            pressed while the drop-down portion of the AutoCompleteBox has focus.
            </summary>
            <remarks>
            This method is called by the KeyDown event of the AutoCompleteBox, 
            when the drop-down portion of the AutoCompleteBox has focus.
            This method marks the KeyDown event of the AutoCompleteBox as 
            handled when one of the following keys is pressed: Enter 
            The HandleKeyDown method raises the Commit event when the Enter 
            key is pressed. The method raises the Cancel event when the Escape 
            key is pressed.
            </remarks>
            <param name="e">
            A KeyEventArgs that contains data about the KeyDown event.
            </param>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnCommit">
            <summary>
            Raises the Commit event.
            </summary>
            <remarks>
            Raising an event invokes the event handler through a delegate. 
            The OnCommit method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.
            Notes to Inheritors: When overriding OnCommit in a derived class, 
            be sure to call the base class’s OnCommit method so that registered 
            delegates receive the event. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnCommit(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Fires the Commit event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnCancel">
            <summary>
            Raises the Cancel event.
            </summary>
            <remarks>
            Raising an event invokes the event handler through a delegate. 
            The OnCancel method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.
            Notes to Inheritors: When overriding OnCancel in a derived class, be 
            sure to call the base class’s OnCancel method so that registered 
            delegates receive the event. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.OnCancel(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Fires the Cancel event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.AfterAdapterAction">
            <summary>
            Change the selection after the actions are complete.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SelectorSelectionAdapter.CreateAutomationPeer">
            <summary>
            Returns an automation peer for the underlying Selector control, for 
            use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            An automation peer for use by the Silverlight automation infrastructure.
            </returns>
            <remarks>
            This method returns an automation peer for the underlying Selector 
            control. It creates a new automation peer instance if one has not 
            been created; otherwise, it returns the automation peer previously 
            created. The automation peer is included as a child by the 
            AutoCompleteBox control.
            Classes that participate in the Silverlight automation 
            infrastructure must implement this method to return a class-specific 
            derived class of AutomationPeer that reports information for 
            automation behavior.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.SelectorSelectionAdapter.IgnoringSelectionChanged">
            <summary>
            Gets or sets a value indicating whether the selection change event 
            should not be fired.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SelectorSelectionAdapter.SelectorControl">
            <summary>
            Gets or sets the underlying Selector control.
            </summary>
            <remarks>
            The SelectorSelectionAdapter is used to set the Selector used by 
            the AutoCompleteBox control. You specify the SelectorControl 
            property in the template for the AutoCompleteBox.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.SelectorSelectionAdapter.SelectionChanged">
            <summary>
            Occurs when the SelectedItem property value changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.SelectorSelectionAdapter.Commit">
            <summary>
            Occurs when an item is selected and is committed to the underlying 
            Selector control.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.SelectorSelectionAdapter.Cancel">
            <summary>
            Occurs when a selection is canceled before it is committed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SelectorSelectionAdapter.SelectedItem">
            <summary>
            Gets or sets the selected item of the selection adapter.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SelectorSelectionAdapter.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the 
            content of the selection adapter.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainUpDown">
            <summary>
            Represents a control that enables single value selection from a 
            domain of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase`1">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <remarks>
            This non generic base class is used to specify default template,
            and simulate covariance among sub classes of UpDownBase&lt;T&gt;.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementTextName">
            <summary>
            Name constant for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementSpinnerName">
            <summary>
            Name constant for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleName">
            <summary>
            Name constant for SpinnerStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for SpinnerStyleProperty.
            </summary>
            <param name="d">UpDownBase whose SpinnerStyleProperty changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when SpinnerStyle property value has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.GetValue">
            <summary>
            GetValue method for returning UpDownBase&lt;T&gt;.Value as object.
            </summary>
            <returns>Value as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.SetValue(System.Object)">
            <summary>
            SetValue method for setting UpDownBase&lt;T&gt;.Value through object type parameter.
            </summary>
            <param name="value">New value in object type.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._textBox">
            <summary>
            Private field for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._text">
            <summary>
            Private field to hold previous value of TextBox.Text.
            </summary>
            <remarks>
            Because TextBox.TextChanged seems to fire randomly, 
            so we compensatethat by handling LostFocus,
            and comparing TextBox.Text with cached previous value.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._spinner">
            <summary>
            Private field for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.IsEditableProperty">
            <summary>
            Identifies the IsEditable dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEditableProperty property changed handler.
            </summary>
            <param name="d">UpDownBase that changed its IsEditable.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase(of T) class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.GetValue">
            <summary>
            GetValue override to return Value property as object type.
            </summary>
            <returns>The Value property as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetValue(System.Object)">
            <summary>
            SetValue override to set value to Value property.
            </summary>
            <param name="value">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnApplyTemplate">
            <summary>
            Builds the visual tree for the UpDownBase(of T) control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous 
            value to decide whether user has typed in a new value. 
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ProcessUserInput">
            <summary>
            Called OnLostFocus and OnKeyDown(Key.Enter) to process user input.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's GotFocus event.
            This event handler selects the whole text on GotFocus when nothing is selected.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetTextBoxText">
            <summary>
            Display current value in Text template part.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpinnerSpin(System.Object,System.Windows.Controls.SpinEventArgs)">
            <summary>
            Event handler for Spinner template part's Spin event.
            </summary>
            <param name="sender">The Spinner template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParseError(System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raises the ParserError event when there is an error in parsing user input.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParsing(System.Windows.Controls.UpDownParsingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Parsing"/> event, to allow easily hooking
            into the parse logic.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Occurs when the spinner spins.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{`0})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{`0})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditableChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when IsEditable property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Text">
            <summary>
            Gets the Text template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Spinner">
            <summary>
            Gets the Spinner template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.IsEditable">
            <summary>
            Gets or sets a value indicating whether the value can be manually 
            edited by the end-user.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.GroupDomain">
            <summary>
            Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateInvalid">
            <summary>
            Invalid of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateValid">
            <summary>
            Valid of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._items">
            <summary>
            Backing store for the Items collection, when ItemsSource is null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueDuringInitialization">
            <summary>
            The value as set during initialization. Since no items have been added
            at that point, the value will be reset. However, during 
            initialization, the value will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to new object().</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isNotAllowedToEditByFocus">
            <summary>
            Indicates whether the control should not move to EditMode when
            it is gains Focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isEditing">
            <summary>
            BackingField for IsEditing, indicating whether the control is in EditMode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isInvalidInput">
            <summary>
            Backing field for InvalidInput, indicating whether the last parsed input was invalid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.CurrentIndexProperty">
            <summary>
            Identifies the CurrentIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CurrentIndexProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its CurrentIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.IsValidCurrentIndex(System.Int32)">
            <summary>
            SelectedIndexProperty validation handler.
            </summary>
            <param name="value">New value of SelectedIndexProperty.</param>
            <returns>
            Returns true if value is valid for SelectedIndexProperty, false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.CoerceSelectedIndex(System.Int32)">
            <summary>
            CurrentIndexProperty coercion handler.
            </summary>
            <param name="index">The index.</param>
            <returns>
            Coerced effective value of CurrentIndexProperty from input parameter value.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._initialCurrentIndex">
            <summary>
            Cached previous value of SelectedIndexProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexDuringInitialization">
            <summary>
            The index as set during initialization. Since no items have been added
            at that point, an Exception should be thrown. However, during 
            initialization, the index will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to -1.</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexNestLevel">
            <summary>
            Nest level for selected index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ConverterProperty">
            <summary>
            Identifies the Converter dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ConverterParameterProperty">
            <summary>
            Identifies the ConverterParameter dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ConverterCultureProperty">
            <summary>
            Identifies the ConverterCulture dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.InvalidInputActionProperty">
            <summary>
            Identifies the InvalidInputAction dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnInvalidInputActionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            InvalidInputAction property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed the InvalidInputAction.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.FallbackItemProperty">
            <summary>
            Identifies the FallbackItem dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown that changed its ItemsSource.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemTemplateProperty">
            <summary>
            Identifies the ItemTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DomainUpDown control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a DomainUpDownAutomationPeer for use by the 
            Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetActualItems">
            <summary>
            Gets the correct items collection that we are using, abstracting away ItemsSource and Items logic.
            </summary>
            <returns>Returns either Items or ItemsSource.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items collection is changed. This can either be Items or ItemsSource.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <remarks>If ItemsSource does not implement INotifyCollectionChanged, this method will not be called on
            changes in the ItemsSource.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when ItemsSource has changed.
            Handles setting the selected item.
            </summary>
            <param name="oldItemsSource">The old items source.</param>
            <param name="itemsSource">The items source.</param>
            <remarks>When switching ItemsSource, the selectedIndex will be used (if possible) 
            to select an item in the new collection.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Object})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Cancels the event when the value is not part of the domain.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Will set CurrentIndex.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexChanged(System.Int32,System.Int32)">
            <summary>
            Processes changes to the CurrentIndex property.
            </summary>
            <param name="oldValue">The old value of CurrentIndex.</param>
            <param name="newValue">The new value of CurrentIndex.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a value in the domain.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
            <remarks>An empty string will return the currently selected value.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not increment when the selected item is the last item.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not decrement when the selected item is the first item. </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current index, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.TryEnterEditMode">
            <summary>
            Tries the enter edit mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetIndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Gets the index of a sequence.
            </summary>
            <param name="sequence">The sequence that contains the item of interest.</param>
            <param name="item">The item that contained within the sequence.</param>
            <returns>The index of the item in the sequence. -1 if the item was not found.</returns>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.Items">
            <summary>
            Gets a collection of items which represent the domain 
            in the DomainUpDown control.
            </summary>
            <remarks>When ItemsSource is set, will return a copy of the items in ItemsSource.
            When ItemsSource property is not set (set to null) this collection 
            will return an empty writeable colection.</remarks>
            <value>The items.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsEditing">
            <summary>
            Gets a value indicating whether the control is in EditMode.
            </summary>
            <value><c>True</c> if currently in edit mode; otherwise, <c>False</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsInvalidInput">
            <summary>
            Gets or sets a value indicating whether the last parsed input was invalid.
            </summary>
            <value><c>True</c> if input is currently Invalid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.CurrentIndex">
            <summary>
            Gets or sets the index of the current selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the DomainUpDown control 
            will cycle through values when trying to spin the first and last item. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.Converter">
            <summary>
            Gets or sets the value converter used to convert item instances to 
            string values.
            </summary>
            <remarks>
            This enables high performance lookups. The conversion is from object 
            to type of string. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ConverterParameter">
            <summary>
            Gets or sets the parameter used with the converter property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ConverterCulture">
            <summary>
            Gets or sets the culture used in with the converter property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.InvalidInputAction">
            <summary>
            Gets or sets a value determining the DomainUpDown behavior when a 
            user sets a value not included in the domain.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.FallbackItem">
            <summary>
            Gets or sets the item that is used when a user attempts to 
            set a value not included in the domain.
            </summary>
            <remarks>FallbackItem will only be used if it is contained within 
            the Items collection.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemsSource">
            <summary>
            Gets or sets a collection of items which represent the 
            domain in the DomainUpDown control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display an item from the 
            Domain when the item is selected.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.DomainUpDownAutomationPeer">
            <summary>
            Exposes DomainUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1">
            <summary>
            Exposes UpDownBase types to UI Automation.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.#ctor(System.Windows.Controls.UpDownBase{`0})">
            <summary>
            Initializes a new instance of the UpDownBaseAutomationPeer class.
            </summary>
            <param name="owner">
            The UpDownBase that is associated with this UpDownBaseAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Group AutomationControlType.</returns>
            <remarks>Return AutomationControlType.Spinner per MSDN article.</remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetClassNameCore">
            <summary>
            Gets the name of the UpDownBase that is associated with this
            UpDownBaseAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name UpDownBase.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.OwnerUpDown">
            <summary>
            Gets the UpDownBase that owns this UpDownBaseAutomationPeer.
            </summary>
            <value>The domain up down.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.#ctor(System.Windows.Controls.DomainUpDown)">
            <summary>
            Initializes a new instance of the DomainUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The DomainUpDown that is associated with this DomainUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the DomainUpDown that is associated with this
            DomainUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name DomainUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.InvalidInputAction">
            <summary>
            Determines the behavior of a DomainUpDown control when a user sets a 
            value not included in the domain.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.UseFallbackItem">
            <summary>
            Once a user sets a value not included in the domain, the DomainUpDown 
            control will use the FallbackItem property as the selected item. If 
            FallbackItem is not specified the first item in the DomainUpDown Items 
            collection will be used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.TextBoxCannotLoseFocus">
            <summary>
            Once a user sets a value not included in the domain, the 
            DomainUpDown control cannot lose focus.
            </summary>
            <remarks>There are situations that the control can not regain focus.</remarks>
        </member>
        <member name="T:System.Windows.Controls.ObservableObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObservableObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML and allows for readonly collections.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObservableObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObservableObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
            <param name="collection">The collection whose items will be copied.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.InsertItem(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.SetItem(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
            <value><c>True</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericUpDown">
            <summary>
            Represents a control that enables single value selection from a numeric
            range of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Minimum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Maximum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.IncrementProperty">
            <summary>
            Identifies the Increment dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IncrementProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Increment property.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Increment property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementChanged(System.Double,System.Double)">
            <summary>
            Called when the Increment property value has changed.
            </summary>
            <param name="oldValue">Old value of the Increment property.</param>
            <param name="newValue">New value of the Increment property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.DecimalPlacesProperty">
            <summary>
            Identifies the DecimalPlaces dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DecimalPlacesProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its DecimalPlaces.</param>
            <param name="e">DependencyPropertyChangedEventArgs for DecimalPlaces property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesChanged(System.Int32,System.Int32)">
            <summary>
            Called when the DecimalPlaces property value has changed.
            </summary>
            <param name="oldValue">Old value of the DecimalPlaces property.</param>
            <param name="newValue">New value of the DecimalPlaces property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.formatString">
            <summary>
            Format string used to display Value property.
            </summary>
            <seealso cref="P:System.Windows.Controls.NumericUpDown.DecimalPlaces"/>
            <seealso cref="M:System.Windows.Controls.NumericUpDown.FormatValue"/>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.#ctor">
            <summary>
            Initializes a new instance of the NumericUpDown class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current value, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the NumericUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a NumericUpDownAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A NumericUpDownAutomationPeer object for the NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanging to do validation and coercion.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanged to raise value changed automation event and 
            determine if a maximum or minimum has been reached.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a decimal number.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.FormatValue">
            <summary>
            Provides decimal specific value formatting for the value property.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._levelsFromRootCall">
            <summary>
            Levels from root call.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialInc">
            <summary>
            Initial Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMin">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMax">
            <summary>
            Initial Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialVal">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedInc">
            <summary>
            Requested Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMin">
            <summary>
            Requested Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMax">
            <summary>
            Requested Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedVal">
            <summary>
            Requested Value value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceMaximum">
            <summary>
            Ensure the Maximum is greater than or equal to the Minimum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceValue">
            <summary>
            Ensure the value falls between the Minimum and Maximum values.
            This function assumes that (Maximum >= Minimum).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.IsValidDoubleValue(System.Object,System.Double@)">
            <summary>
            Check if an object value is a valid double value.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="number">The double value to be returned.</param>
            <returns>true if a valid double; false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <remarks>
            EnsureValidDoubleValue(DependencyObject d, DependencyPropertyChangedEventArgs e) is simply a wrapper for 
            EnsureValidDoubleValue(DependencyObject d, DependencyProperty property, object oldValue, object newValue).
            </remarks>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="property">The DependencyProperty that changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidIncrementValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of Increment dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDecimalPlacesValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of DecimalPlaces dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DecimalPlaces DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Minimum">
            <summary>
            Gets or sets the Minimum possible Value.
            </summary>
            <remarks>
            The default value is zero.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Maximum">
            <summary>
            Gets or sets the Maximum possible Value.
            </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Increment">
            <summary>
            Gets or sets a value added or subtracted from the value property.
             </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places that are displayed in the 
            NumericUpDown. 
            </summary>
            <remarks>
            The default value is zero.
            
            DecimalPlaces decides output format of Value property.
            It is implemented via formatString field and FormatValue override.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.NumericUpDownAutomationPeer">
            <summary>
            Exposes NumericUpDown types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.#ctor(System.Windows.Controls.NumericUpDown)">
            <summary>
            Initializes a new instance of the NumericUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The NumericUpDown that is associated with this NumericUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the NumericUpDown that is associated with this
            NumericUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the NumericUpDown that is associated
            with this NumericUpDownAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Sets the value of the NumericUpDown.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value of the NumericUpDown is read-only.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <summary>
            Gets the maximum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <summary>
            Gets minimum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <summary>
            Gets the value of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
            <remarks>
            ButtonSpinner inherits from Spinner. 
            It adds two button template parts and a content property.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.Spinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
            <remarks>
            Spinner abstract class defines and implements common and focused visual state groups.
            Spinner abstract class defines and implements Spin event and OnSpin method.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Spinner.ValidSpinDirectionProperty">
            <summary>
            Identifies the ValidSpinDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidSpinDirectionProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its ValidSpinDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.#ctor">
            <summary>
            Initializes a new instance of the Spinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Spinner.ValidSpinDirection">
            <summary>
            Gets or sets the spin direction that is currently valid.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Spinner.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Spinner.Spin">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementIncreaseButtonName">
            <summary>
            Name constant of the IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementDecreaseButtonName">
            <summary>
            Name constant of the DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._increaseButton">
            <summary>
            Private field for IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._decreaseButton">
            <summary>
            Private field for DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its Content.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.#ctor">
            <summary>
            Initializes a new instance of the ButtonSpinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ButtonSpinner control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentChanged(System.Object,System.Object)">
            <summary>
            Occurs when the Content property value changed.
            </summary>
            <param name="oldValue">The old value of the Content property.</param>
            <param name="newValue">The new value of the Content property.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle click event of IncreaseButton and DecreaseButton template parts,
            translating Click to appropriate Spin event.
            </summary>
            <param name="sender">Event sender, should be either IncreaseButton or DecreaseButton template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.Content">
            <summary>
            Gets or sets the content that is contained within the button spinner.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.SpinEventArgs.#ctor(System.Windows.Controls.SpinDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="P:System.Windows.Controls.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the 
            end-user.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.ItemSelectionHelper`1">
            <summary>
            Exposes an ObservableCollection of T and 
            a SelectedItem property for binding purposes.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItemName">
            <summary>
            Name used for the SelectedItem property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.ItemsName">
            <summary>
            Name used for the Items property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._selectedItem">
            <summary>
            BackingField for the selected item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._items">
            <summary>
            BackingField for Items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:System.Windows.Controls.Primitives.ItemSelectionHelper`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time from a ListBox.
            </summary>
            <remarks>Can also be used independently.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopup">
            <summary>
            Base class for a control that can be used as the popup portion in a TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.ITimeInput">
            <summary>
            Interface describing the common value, maximum and minimum properties
            that a TimeInput control is expected to have.
            </summary>
            <remarks>Used for internal coercion of these properties.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Value">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedStateName">
            <summary>
            The name of the visual state that represents a Popup that is 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.NotContainedStateName">
            <summary>
            The name of the visual state that represent a Popup that is not 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedByPickerGroupName">
            <summary>
            The name of the ContainedByPicker state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupModeGroupName">
            <summary>
            The name of the PopupMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsAndDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowTimeDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.HoursAndMinutesOnlyStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timePickerParent">
            <summary>
            BackingField of TimePickerParent.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoChanged(System.Windows.Controls.TimeGlobalizationInfo,System.Windows.Controls.TimeGlobalizationInfo)">
            <summary>
            Called when the time globalization info changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when display format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCancel">
            <summary>
            Raises the Cancel event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCommit">
            <summary>
            Raises the Commit event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual states.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimePickerParent">
            <summary>
            Gets or sets the container for this Popup.
            </summary>
            <value>The TimePicker that contains this Popup.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Minimum">
            <summary>
            Gets or sets the Minimum time considered valid by the control.
            </summary>
            <remarks>Setting the Minimum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Maximum">
            <summary>
            Gets or sets the Maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            time formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalizationInfo used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time 
            in the TimePickerPopup. If no format is specified, ShortTimeFormat 
            is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupSecondsInterval">
            <summary>
            Gets or sets the interval of seconds that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupMinutesInterval">
            <summary>
            Gets or sets the interval of minutes that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Commit">
            <summary>
            Occurs when a selected item is committed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxPartName">
            <summary>
            The name of the ListBox TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._listBoxPart">
            <summary>
            BackingField for ListBoxPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._isValueChangeCausedBySelection">
            <summary>
            Determines whether the value changed because SelectedItem in the
            ListBox was changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxStyleProperty">
            <summary>
            Identifies the ListBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyleProperty">
            <summary>
            Identifies the ListBoxItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxItemStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionProperty">
            <summary>
            Identifies the TimeItemsSelection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnTimeItemsSelectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeItemsSelectionProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its TimeItemsSelection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ListTimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RegenerateTimeItems">
            <summary>
            Regenerates the time items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.SelectValue">
            <summary>
            Select a value based on the current value. This will 'snap' the 
            Value to the closest possible Time based on the interval.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ScrollToSelectedValue">
            <summary>
            Scrolls to a value in the list, or closest.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Called when the TimeItems object is set.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called by any property change on the TimeItems object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnOpened">
            <summary>
            Called when TimePicker opened the popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ItemSelectedByMouse(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the ListBoxPart control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxPart">
            <summary>
            Gets or sets the ListBox part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxStyle">
            <summary>
            Gets or sets the Style applied to the ListBox portion the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyle">
            <summary>
            Gets or sets the Style applied to the ListBoxItems in the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelection">
            <summary>
            Gets the collection of times used in the ListBox portion of the 
            ListTimePickerPopup control.
            </summary>
            <value>The time items selection.</value>
        </member>
        <member name="T:System.Windows.Controls.RangeTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time through 3 
            sliders: Hours, Minutes and seconds.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursSliderPartName">
            <summary>
            The HoursSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesSliderPartName">
            <summary>
            The MinutesSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsSliderPartName">
            <summary>
            The SecondsSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursContainerPartName">
            <summary>
            The HoursLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesContainerPartName">
            <summary>
            The MinutesLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsContainerPartName">
            <summary>
            The SecondsLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPartName">
            <summary>
            The name of the CommitButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPartName">
            <summary>
            The name of the CancelButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._secondsSlider">
            <summary>
            BackingField for the SecondsSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._minutesSlider">
            <summary>
            BackingField for the MinutesSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._hoursSlider">
            <summary>
            BackingField for the HoursSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._cancelButtonPart">
            <summary>
            BackingField for CancelButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._commitButtonPart">
            <summary>
            BackingField for CommitButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._isOpenedByContainer">
            <summary>
            Is set when opened or closed by a container.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._ignoreSliderChange">
            <summary>
            Determines whether the control should ignore the changes in its 
            sliders.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SliderStyleProperty">
            <summary>
            Identifies the SliderStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnSliderStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SliderStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its SliderStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.LabelItemTemplateProperty">
            <summary>
            Identifies the LabelItemTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnLabelItemTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LabelItemTemplateProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its LabelItemTemplate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.RangeTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the RangeTimePickerPopup control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SliderSizeChange(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when a slider changes size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SecondsChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Seconds Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.MinutesChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Minutes Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>        
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.HoursChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Hours Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCommit(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the commit button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCancel(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the cancel button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValueFromSliders">
            <summary>
            Calculates the value based on the sliders.
            </summary>
            <returns>The DateTime as represented by the current values in the 
            Sliders.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetSlidersToValue(System.DateTime)">
            <summary>
            Sets the sliders to value.
            </summary>
            <param name="value">The DateTime that needs to be reflected by
            the three sliders.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GenerateLabels">
            <summary>
            Generates the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.LayoutLabels">
            <summary>
            Arranges the time labels on the RangeTimePickerPopup control.
            </summary>
            <remarks>Uses a canvas to layout labels vertically.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetCoercedValue(System.DateTime)">
            <summary>
            Gets the value after Minimum and Maximum coercion.
            </summary>
            <param name="time">The input.</param>
            <returns>Time between Minimum and Maximum.</returns>
            <remarks>Done to avoid coercion in containing controls.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetSnappedValue(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the coerced value, using interval and a minimum and maximum.
            </summary>
            <param name="value">The value that will be snapped.</param>
            <param name="minimum">The minimum the value may be.</param>
            <param name="maximum">The maximum the value may be.</param>
            <param name="interval">The interval to which the value gets snapped.</param>
            <returns>A value that is within range and snapped to an interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateLabelElement(System.String,System.Double)">
            <summary>
            Creates the element for a label.
            </summary>
            <param name="text">The text that is set as content.</param>
            <param name="percentage">The percentage this label represents on the
            slider.</param>
            <returns>A framework element.</returns>
            <remarks>Uses LabelItemTemplate to template the Label element.</remarks>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsSlider">
            <summary>
            Gets or sets the seconds slider Part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesSlider">
            <summary>
            Gets or sets the minutes slider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursSlider">
            <summary>
            Gets or sets the HoursSlider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursContainer">
            <summary>
            Gets or sets the hours labels.
            </summary>
            <value>The hours labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesContainer">
            <summary>
            Gets or sets the minute labels.
            </summary>
            <value>The minute labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsContainer">
            <summary>
            Gets or sets the second labels.
            </summary>
            <value>The second labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPart">
            <summary>
            Gets or sets the cancel button part.
            </summary>
            <value>The cancel button part.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPart">
            <summary>
            Gets or sets the commit button part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.IsCurrentlyOpen">
            <summary>
            Gets a value indicating whether this instance is currently open.
            </summary>
            <value><c>True</c> if this instance is currently open; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SliderStyle">
            <summary>
            Gets or sets the Style applied to the sliders in the 
            RangeTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.LabelItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to generate labels on the 
            hour, minute and second sliders.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PopupTimeSelectionMode">
            <summary>
            Determines the granularity of time selection
            by a popup. Hours and minutes are always used.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.AllowSecondsSelection">
            <summary>
            Hours, Minutes and Seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.HoursAndMinutesOnly">
            <summary>
            Hours and Minutes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CustomTimeFormat">
            <summary>
            Represents a single time format used for parsing and formatting.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ITimeFormat">
            <summary>
            Defines time formats used for formatting and parsing DateTime values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>A format to use during display of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>An array of formats to be used during parsing.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
            <param name="format">The format that is used to parse or display
            a String or DateTime.</param>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Equality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Inequality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.CustomTimeFormat.Format">
            <summary>
            Gets or sets the custom format that is used to parse or display
            a String or DateTime.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LongTimeFormat">
            <summary>
            Represents the long time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Equality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Inequality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.ShortTimeFormat">
            <summary>
            Represents the short time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Equality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Inequality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeFormatConverter">
            <summary>
            Converts from a string value to an ITimeFormat instance. Converts "Short" 
            to ShortTimeFormat, "Long" to LongTimeFormat and any other strings to 
            CustomTimeFormat. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified 
            type descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of type string to an instance of type ITimeFormat.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="source">
            The string that is converted.
            </param>
            <returns>
            An instance of ITimeFormat that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an known instance of type ITimeFormat to a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeGlobalizationInfo">
            <summary>
            Strategy object that determines how controls interact with DateTime and 
            CultureInfo.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeGlobalizationInfo.TimeChars">
            <summary>
            The characters that are allowed inside a format.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)">
            <summary>
            Transforms a format to a format that only allows the characters
            h, m, s, t, H and the defined TimeSeparators (: and .).
            Also takes into account the rule that a single TimeCharacter should
            be followed by a space.
            </summary>
            <param name="format">The format that needs to be transformed.</param>
            <returns>A format containing only the expected characters.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)">
            <summary>
            Returns the global representation of each integer formatted 
            by the TimeGlobalizationInfo.
            </summary>
            <param name="input">Character that will be mapped to a different
            character.</param>
            <returns>The global version of a character that represents the input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)">
            <summary>
            Returns the European number character of each global representation 
            parsed by the TimeGlobalizationInfo.
            </summary>
            <param name="input">The global version of the character that needs 
            to be mapped to a regular character.</param>
            <returns>The character that represents the global version of a character.</returns>
            <remarks>All characters pass through this method (whitespaces and
            TimeDesignators). Return the input character if no logical mapping
            could be made.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Gets the actual TimeParsers that will be used for parsing.
            </summary>
            <param name="parsers">The parsers that are currently used by parent.</param>
            <returns>A new collection of parsers that represent the parsers
            this strategy object will use.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])">
            <summary>
            Formats the specified DateTime to a time string representation.
            </summary>
            <param name="value">The DateTime that should be formatted.</param>
            <param name="timeFormat">The time format used to describe how value
            should be formatted.</param>
            <param name="timeCharacters">The allowed characters in the format. 
            Leave empty to indicate that all characters are allowed. See remarks.</param>
            <returns>
            A string that represents the time part of a DateTime.
            </returns>
            <remarks>The TimeFormat will contain TimeCharacters in a certain 
            order, like hh:mm:ss. By passing specific TimeCharacters, these
            will get filtered and the method only returns part of the formatted
            string. Example: pass 'h', 't', 'H' to get back 4 AM, if the culture
            was set to en-US.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <returns>
            A DateTime with a correctly set time part.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <param name="result">A DateTime with a correctly set time part.</param>
            <returns>
            True, if the time was parsed correctly, false if the time was not 
            parsed.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the time unit that is represented by a text position.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="textPosition">The location in the text.</param>
            <param name="timeFormat">The time format describe how the text 
            can be parsed to a DateTime.</param>
            <returns>
            The TimeSpan that is represented by the character at a
            specific caret position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the position for a time unit in a string that can be parsed by 
            the specified ITimeFormat.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="timeSpan">The time span that is searched for.</param>
            <param name="timeFormat">The time format that describes how this text can be
            parsed to a DateTime.</param>
            <returns>
            The position in the text that corresponds to the TimeSpan or
            -1 if none was found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)">
            <summary>
            Performs addition of a date time and a time span in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after incrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)">
            <summary>
            Subtracts a time span from a date time in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after decrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionStart(System.String)">
            <summary>
            Gets the caret position at the start of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <returns>Caret position for the end of the designator,
            or -1 if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionEnd(System.String,System.Int32)">
            <summary>
            Gets the caret position at the end of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <param name="designatorStartIndex">Start index of the designator.</param>
            <returns>
            Caret position for the end of the designator,
            or -1 if none found.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.Culture">
            <summary>
            Gets or sets the culture used by the owning TimeInput control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.ActualCulture">
            <summary>
            Gets the actual culture used by the TimeGlobalizationInfo for formatting 
            and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators">
            <summary>
            Gets the characters that may be used to separate components of time,
            that is, hours, minutes and seconds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.AMDesignator">
            <summary>
            Gets the string designator for hours that are "ante meridiem" 
            (before noon).
            </summary>
            <value>The AM designator.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.PMDesignator">
            <summary>
            Gets the string designator for hours that are "post meridiem" 
            (after noon).
            </summary>
            <value>The PM designator.</value>
        </member>
        <member name="T:System.Windows.Controls.Picker">
            <summary>
            Base class for all controls that have popup functionality.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementPopupName">
            <summary>
            Name constant for Popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementDropDownToggleName">
            <summary>
            Name constant for DropDownToggle.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownPopup">
            <summary>
            BackingField for PopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownToggleButton">
            <summary>
            BackingField for DropDownTogglePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.IsDropDownOpenProperty">
            <summary>
            Identifies the IsDropDownOpen dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnIsDropDownOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its IsDropDownOpen.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.PopupButtonModeProperty">
            <summary>
            Identifies the PopupButtonMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupButtonModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupButtonModeProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its PopupButtonMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.MaxDropDownHeightProperty">
            <summary>
            Identifies the MaxDropDownHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxDropDownHeightProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its MaxDropDownHeight.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChild">
            <summary>
            BackingField for PopupChild.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._outsidePopupCanvas">
            <summary>
            Gets or sets the expansive area outside of the popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChildCanvas">
            <summary>
            Gets or sets the canvas for the popup child.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending 
            change handlers. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupClosedVisualState">
            <summary>
            Gets or sets a value indicating whether a visual popup state is 
            being used in the current template for the Closed state. Setting 
            this value to true will delay the actual setting of Popup.IsOpen 
            to false until after the visual state's transition for Closed is 
            complete.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Picker"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Picker control when a new template is 
            applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.GetSelectedValue">
            <summary>
            Gets the selected value represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.ArrangePopup">
            <summary>
            Arrange the drop down popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OpenDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly opens the popup, checks the expander 
            button, and then fires the Opened event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.CloseDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly closes the popup, flips the Checked 
            value, and then fires the Closed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ToggleButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Opens or closes the popup if reacting to button press.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OutsidePopupMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ControlIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightChanged(System.Double)">
            <summary>
            Handles MaxDropDownHeightChanged by re-arranging and updating the 
            popup arrangement.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpening(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpening event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation and 
            halt opening the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpened event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosing(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosing event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation 
            and halt closing the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control 
            currently has the focus.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.HasFocus">
            <summary>
            Checks to see if the control has focus currently.
            </summary>
            <returns>Returns a value indicating whether the control or its popup
            have focus.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownPopup">
            <summary>
            Gets or sets the popup part.
            </summary>
            <value>The popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownToggleButton">
            <summary>
            Gets or sets the drop down toggle part.
            </summary>
            <value>The drop down toggle part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion 
            of the control is open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupButtonMode">
            <summary>
            Gets or sets the button event that causes the popup portion of the 
            Picker control to open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the 
            Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupChild">
            <summary>
            Gets the element shown in the drop down portion of the Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from 
            false to true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from 
            false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false 
            and the drop-down is open.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeCoercionHelper._timeInputControl">
            <summary>
            The TimeInput control that needs to be coerced.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.#ctor(System.Windows.Controls.ITimeInput)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeCoercionHelper"/> class.
            </summary>
            <param name="timeInput">The time input that this helper will coerce.</param>
            <remarks>Lifetime of this helper class is determined by lifetime
            of control it is coercing.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMinimumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the minimum value being set.
            </summary>
            <param name="newMinimum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMaximumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the maximum value being set.
            </summary>
            <param name="newMaximum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValue(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValueOnRangeMove(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="newMinimum">The new minimum.</param>
            <param name="newMaximum">The new maximum.</param>
            <returns>True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParser">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParserCollection">
            <summary>
            Represents a collection of TimeParser objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
            <param name="parsers">A sequence of TimeParser objects that will
            be copied into this collection.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.CatchallTimeParser">
            <summary>
            TimeParser that will allow very loose time to be entered. It will try
            to parse the first two numbers as hours and the second two numbers as 
            minutes, and will not care about other characters, such as designators,
            separators or non-time related characters.
            If the first character is bigger than 2, it will parse only the first 
            character as an hour and will use the second two characters for minutes.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.CatchallTimeParser.exp">
            <summary>
            Expression used to parse.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CatchallTimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>
            True if the parse was successful, false if it was not.
            </returns>
            <remarks>The parsing is culture insensitive. A user can type 8p to
            indicate 20:00:00, or 20.</remarks>
        </member>
        <member name="T:System.Windows.Controls.TimePicker">
            <summary>
            Represents a control that allows the user to select a time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementTimeUpDownName">
            <summary>
            The name for the TimeUpDown element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleName">
            <summary>
            The name for the TimeUpDownStyle element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeUpDownPart">
            <summary>
            BackingField for TimeUpDownPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupPlaceHolderPart">
            <summary>
            BackingField for PopupPlaceHolderPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupSessionValueCache">
            <summary>
            Cache of the value before we open a popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleProperty">
            <summary>
            Identifies the TimeUpDownStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeUpDownStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeUpDownStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its TimeUpDownStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SpinnerStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its SpinnerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupProperty">
            <summary>
            Identifies the Popup dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Popup.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupSecondsInitialized">
            <summary>
            Determines whether PopupSeconds has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupMinutesInitialized">
            <summary>
            Determines whether PopupMinutes has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePicker"/> 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePicker control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.GetSelectedValue">
            <summary>
            Gets the selected time  represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a change in value in TimeUpDown.
            </summary>
            <param name="sender">The TimeUpDown that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParseError(System.Object,System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParsing(System.Object,System.Windows.Controls.UpDownParsingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownOpened event when the IsDropDownOpen property
            changed from false to true.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownClosed event when the IsDropDownOpen property
            changed from true to false.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a Value change in a popup.
            </summary>
            <param name="sender">The Popup that raised a ValueChange.</param>
            <param name="e">The  instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCommitted(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been committed. Will close the popup.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCanceled(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been canceled. Will close the popup,
            and set the value back to its initial value.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupChanged(System.Windows.Controls.TimePickerPopup,System.Windows.Controls.TimePickerPopup)">
            <summary>
            Called when a new Popup is set.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PropagateNewValue">
            <summary>
            Propagates the new value to components that are part of
            our template.
            </summary>
            <remarks>Workaround for SL2 inability to do twoway 
            templatebinding. Should remove in SL3.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownPart">
            <summary>
            Gets or sets the time up down part.
            </summary>
            <value>The time up down part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupPlaceHolderPart">
            <summary>
            Gets or sets the popup place holder part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value from 
            the textbox, spinning a new value and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value 
            from the textbox, spinning a new value and programmatically specifying 
            a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownStyle">
            <summary>
            Gets or sets the Style applied to the TimeUpDown portion of the TimePicker 
            control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Format">
            <summary>
            Gets or sets the Format used by the control. From XAML Use either 
            "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time in the 
            TimePicker. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Popup">
            <summary>
            Gets or sets the TimePickerPopup that will be shown to the user by the 
            TimePicker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupSecondsInterval">
            <summary>
            Gets or sets the seconds interval between time values allowed by 
            the TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupMinutesInterval">
            <summary>
            Gets or sets the minutes interval between time values allowed by the 
            TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.TimeTypeConverter">
            <summary>
            Allows time to be set from xaml.
            </summary>
            <QualityBand>Preview</QualityBand>
            <remarks>This converter is used by xaml and thus uses the 
            English formats.</remarks>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._timeFormats">
            <summary>
            BackingField for the TimeFormats being used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._dateFormats">
            <summary>
            BackingField for the DateFormats being used.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from 
            the specified type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified 
            type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of other data types into instances of DateTime that
            represent a time.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert. This culture
            is not used during conversion, but a specific set of formats is used.</param>
            <param name="source">
            The string being converted to the DateTime.
            </param>
            <returns>
            A DateTime that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime into a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeUpDown">
            <summary>
            Represents a control that uses a spinner and textbox to allow a user to 
            input time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.WatermarkHintFormat">
            <summary>
            StringFormat used in the balloon hint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupBalloonHint">
            <summary>
            The group name "BalloonHintStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeParsingStates">
            <summary>
            The group name "ParsingStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.BalloonOpenedStateName">
            <summary>
            The state name "Opened" that indicates that the balloon is being
            shown.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.BalloonClosedStateName">
            <summary>
            The state name "Closed" that indicates that no balloon is being 
            shown.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ValidTimeStateName">
            <summary>
            The state name "ValidTime" that indicates that currently the textbox
            text parses to a valid Time.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.InvalidTimeStateName">
            <summary>
            The state name "InvalidTime" that indicates that currently the textbox 
            text does not allow parsing.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.EmptyTimeStateName">
            <summary>
            The state name "EmptyTime" that indicates that currently the textbox
            text would parse to a Null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._lastParsedText">
            <summary>
            The text that was last parsed. Used in comparisons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isShowBalloon">
            <summary>
            BackingField for IsShowBalloon.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.BalloonContentProperty">
            <summary>
            Identifies the BalloonContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnBalloonContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            BalloonContentProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its BalloonContent.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimeUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Provides handling for the ValueChanging event.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on the position of the caret,
            the value and the minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the SelectionChanged event from TextBox.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.InputChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the TextChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.DetermineHint">
            <summary>
            Determines the value of the hint property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsShowBalloon">
            <summary>
            Gets or sets a value indicating whether this instance is showing a
            balloon visual.
            </summary>
            <value><c>True</c> if this instance is showing the balloon; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMinimum">
            <summary>
            Gets the actual minimum. If a Minimum is set, use that, otherwise
            use the start of the day.
            </summary>        
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMaximum">
            <summary>
            Gets the actual maximum. If a Maximum is set, use that, otherwise
            use the end of the day.
            </summary>
            <value>The actual maximum.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time  in the 
            TimeUpDown. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the TimeUpDown control will 
            cycle through values when trying to spin the first and last item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.BalloonContent">
            <summary>
            Gets the text used to guide the user when entering time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.UpDownParseErrorEventArgs">
            <summary>
            Provides data for the UpDownBase.ParseError event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParseErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UpDownParseErrorEventArgs class.
            </summary>
            <param name="text">The text that caused the parsing error.</param>
            <param name="error">The exception thrown by ParseValue method.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Text">
            <summary>
            Gets the original string value that failed to parse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Error">
            <summary>
            Gets the exception that was raised during the initial parsing 
            attempt.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.UpDownParsingEventArgs`1">
            <summary>
            Provides data for the UpDownBase.Parsing event.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> class.
            </summary>
            <param name="text">The text that will be parsed.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Text">
            <summary>
            Gets the original string value that will be parsed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Value">
            <summary>
            Gets or sets the value to be used.
            </summary>
            <value>The parsed value.</value>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Handled">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> is handled.
            </summary>
            <value><c>True</c> if handled; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
